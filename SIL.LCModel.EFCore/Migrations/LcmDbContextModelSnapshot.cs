// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SIL.LCModel.Core.Cellar;
using SIL.LCModel.EFCore;
using SIL.LCModel.EFCore.Model;

#nullable disable

namespace SIL.LCModel.EFCore.Migrations
{
    [DbContext(typeof(LcmDbContext))]
    partial class LcmDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LfAgentEvaluationLfWfiAnalysis", b =>
                {
                    b.Property<Guid>("EvaluationsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfWfiAnalysisGuid")
                        .HasColumnType("uuid");

                    b.HasKey("EvaluationsGuid", "LfWfiAnalysisGuid");

                    b.HasIndex("LfWfiAnalysisGuid");

                    b.ToTable("WfiAnalysis_Evaluations_AgentEvaluation", (string)null);
                });

            modelBuilder.Entity("LfAgentLfMoMorphData", b =>
                {
                    b.Property<Guid>("AnalyzingAgentsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfMoMorphDataGuid")
                        .HasColumnType("uuid");

                    b.HasKey("AnalyzingAgentsGuid", "LfMoMorphDataGuid");

                    b.HasIndex("LfMoMorphDataGuid");

                    b.ToTable("MoMorphData_AnalyzingAgents_Agent", (string)null);
                });

            modelBuilder.Entity("LfAnalysisLfSegment", b =>
                {
                    b.Property<Guid>("AnalysesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfSegmentGuid")
                        .HasColumnType("uuid");

                    b.HasKey("AnalysesGuid", "LfSegmentGuid");

                    b.HasIndex("LfSegmentGuid");

                    b.ToTable("Segment_Analyses_Analysis", (string)null);
                });

            modelBuilder.Entity("LfAnnotationLfIndirectAnnotation", b =>
                {
                    b.Property<Guid>("AppliesToGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfIndirectAnnotationGuid")
                        .HasColumnType("uuid");

                    b.HasKey("AppliesToGuid", "LfIndirectAnnotationGuid");

                    b.HasIndex("LfIndirectAnnotationGuid");

                    b.ToTable("IndirectAnnotation_AppliesTo_Annotation", (string)null);
                });

            modelBuilder.Entity("LfAnthroItemLfLexSense", b =>
                {
                    b.Property<Guid>("AnthroCodesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfLexSenseGuid")
                        .HasColumnType("uuid");

                    b.HasKey("AnthroCodesGuid", "LfLexSenseGuid");

                    b.HasIndex("LfLexSenseGuid");

                    b.ToTable("LexSense_AnthroCodes_Possibility", (string)null);
                });

            modelBuilder.Entity("LfAnthroItemLfRnGenericRec", b =>
                {
                    b.Property<Guid>("AnthroCodesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfRnGenericRecGuid")
                        .HasColumnType("uuid");

                    b.HasKey("AnthroCodesGuid", "LfRnGenericRecGuid");

                    b.HasIndex("LfRnGenericRecGuid");

                    b.ToTable("RnGenericRec_AnthroCodes_Possibility", (string)null);
                });

            modelBuilder.Entity("LfAnthroItemLfSemanticDomain", b =>
                {
                    b.Property<Guid>("LfSemanticDomainGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OcmRefsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfSemanticDomainGuid", "OcmRefsGuid");

                    b.HasIndex("OcmRefsGuid");

                    b.ToTable("SemanticDomain_OcmRefs_Possibility", (string)null);
                });

            modelBuilder.Entity("LfAnthroItemLfWordFormLookup", b =>
                {
                    b.Property<Guid>("AnthroCodesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfWordFormLookup1Guid")
                        .HasColumnType("uuid");

                    b.HasKey("AnthroCodesGuid", "LfWordFormLookup1Guid");

                    b.HasIndex("LfWordFormLookup1Guid");

                    b.ToTable("WordFormLookup_AnthroCodes_Possibility", (string)null);
                });

            modelBuilder.Entity("LfBaseAnnotationLfObjectId", b =>
                {
                    b.Property<Guid>("LfBaseAnnotationGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OtherObjectsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfBaseAnnotationGuid", "OtherObjectsGuid");

                    b.HasIndex("OtherObjectsGuid");

                    b.ToTable("BaseAnnotation_OtherObjects_ObjectId", (string)null);
                });

            modelBuilder.Entity("LfConstChartClauseMarkerLfConstChartRow", b =>
                {
                    b.Property<Guid>("DependentClausesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfConstChartClauseMarkerGuid")
                        .HasColumnType("uuid");

                    b.HasKey("DependentClausesGuid", "LfConstChartClauseMarkerGuid");

                    b.HasIndex("LfConstChartClauseMarkerGuid");

                    b.ToTable("ConstChartClauseMarker_DependentClauses_ConstChartRow", (string)null);
                });

            modelBuilder.Entity("LfCrossReferenceLfRnGenericRec", b =>
                {
                    b.Property<Guid>("CrossReferencesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfRnGenericRecGuid")
                        .HasColumnType("uuid");

                    b.HasKey("CrossReferencesGuid", "LfRnGenericRecGuid");

                    b.HasIndex("LfRnGenericRecGuid");

                    b.ToTable("RnGenericRec_CrossReferences_CrossReference", (string)null);
                });

            modelBuilder.Entity("LfFsDisjunctiveValueLfFsSymFeatVal", b =>
                {
                    b.Property<Guid>("LfFsDisjunctiveValueGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfFsDisjunctiveValueGuid", "ValueGuid");

                    b.HasIndex("ValueGuid");

                    b.ToTable("FsDisjunctiveValue_Value_FsSymFeatVal", (string)null);
                });

            modelBuilder.Entity("LfFsFeatDefnLfFsFeatStrucType", b =>
                {
                    b.Property<Guid>("FeaturesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfFsFeatStrucTypeGuid")
                        .HasColumnType("uuid");

                    b.HasKey("FeaturesGuid", "LfFsFeatStrucTypeGuid");

                    b.HasIndex("LfFsFeatStrucTypeGuid");

                    b.ToTable("FsFeatStrucType_Features_FsFeatDefn", (string)null);
                });

            modelBuilder.Entity("LfFsFeatDefnLfPartOfSpeech", b =>
                {
                    b.Property<Guid>("BearableFeaturesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfPartOfSpeechGuid")
                        .HasColumnType("uuid");

                    b.HasKey("BearableFeaturesGuid", "LfPartOfSpeechGuid");

                    b.HasIndex("LfPartOfSpeechGuid");

                    b.ToTable("PartOfSpeech_BearableFeatures_FsFeatDefn", (string)null);
                });

            modelBuilder.Entity("LfFsFeatDefnLfPartOfSpeech1", b =>
                {
                    b.Property<Guid>("InflectableFeatsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfPartOfSpeech1Guid")
                        .HasColumnType("uuid");

                    b.HasKey("InflectableFeatsGuid", "LfPartOfSpeech1Guid");

                    b.HasIndex("LfPartOfSpeech1Guid");

                    b.ToTable("PartOfSpeech_InflectableFeats_FsFeatDefn", (string)null);
                });

            modelBuilder.Entity("LfLangProjectLfWordformLookupList", b =>
                {
                    b.Property<Guid>("LfLangProjectGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WordformLookupListsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfLangProjectGuid", "WordformLookupListsGuid");

                    b.HasIndex("WordformLookupListsGuid");

                    b.ToTable("LangProject_WordformLookupLists_WordformLookupList", (string)null);
                });

            modelBuilder.Entity("LfLexAppendixLfLexSense", b =>
                {
                    b.Property<Guid>("AppendixesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfLexSenseGuid")
                        .HasColumnType("uuid");

                    b.HasKey("AppendixesGuid", "LfLexSenseGuid");

                    b.HasIndex("LfLexSenseGuid");

                    b.ToTable("LexSense_Appendixes_LexAppendix", (string)null);
                });

            modelBuilder.Entity("LfLexDbLfLexEntry", b =>
                {
                    b.Property<Guid>("LexicalFormIndexGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfLexDbGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LexicalFormIndexGuid", "LfLexDbGuid");

                    b.HasIndex("LfLexDbGuid");

                    b.ToTable("LexDb_LexicalFormIndex_LexEntry", (string)null);
                });

            modelBuilder.Entity("LfLexDbLfMoForm", b =>
                {
                    b.Property<Guid>("AllomorphIndexGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfLexDbGuid")
                        .HasColumnType("uuid");

                    b.HasKey("AllomorphIndexGuid", "LfLexDbGuid");

                    b.HasIndex("LfLexDbGuid");

                    b.ToTable("LexDb_AllomorphIndex_MoForm", (string)null);
                });

            modelBuilder.Entity("LfLexEntryInflTypeLfMoInflAffixSlot", b =>
                {
                    b.Property<Guid>("LfLexEntryInflTypeGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SlotsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfLexEntryInflTypeGuid", "SlotsGuid");

                    b.HasIndex("SlotsGuid");

                    b.ToTable("LexEntryInflType_Slots_MoInflAffixSlot", (string)null);
                });

            modelBuilder.Entity("LfLexEntryLfObjectId", b =>
                {
                    b.Property<Guid>("LfLexEntryGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MainEntriesOrSensesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfLexEntryGuid", "MainEntriesOrSensesGuid");

                    b.HasIndex("MainEntriesOrSensesGuid");

                    b.ToTable("LexEntry_MainEntriesOrSenses_ObjectId", (string)null);
                });

            modelBuilder.Entity("LfLexEntryLfPossibility", b =>
                {
                    b.Property<Guid>("DoNotShowMainEntryInGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfLexEntryGuid")
                        .HasColumnType("uuid");

                    b.HasKey("DoNotShowMainEntryInGuid", "LfLexEntryGuid");

                    b.HasIndex("LfLexEntryGuid");

                    b.ToTable("LexEntry_DoNotShowMainEntryIn_Possibility", (string)null);
                });

            modelBuilder.Entity("LfLexEntryLfPossibility1", b =>
                {
                    b.Property<Guid>("DoNotPublishInGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfLexEntry1Guid")
                        .HasColumnType("uuid");

                    b.HasKey("DoNotPublishInGuid", "LfLexEntry1Guid");

                    b.HasIndex("LfLexEntry1Guid");

                    b.ToTable("LexEntry_DoNotPublishIn_Possibility", (string)null);
                });

            modelBuilder.Entity("LfLexEntryLfPossibility2", b =>
                {
                    b.Property<Guid>("DialectLabelsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfLexEntry2Guid")
                        .HasColumnType("uuid");

                    b.HasKey("DialectLabelsGuid", "LfLexEntry2Guid");

                    b.HasIndex("LfLexEntry2Guid");

                    b.ToTable("LexEntry_DialectLabels_Possibility", (string)null);
                });

            modelBuilder.Entity("LfLexEntryLfWfiAnalysis", b =>
                {
                    b.Property<Guid>("LfWfiAnalysisGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StemsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfWfiAnalysisGuid", "StemsGuid");

                    b.HasIndex("StemsGuid");

                    b.ToTable("WfiAnalysis_Stems_LexEntry", (string)null);
                });

            modelBuilder.Entity("LfLexEntryRefLfLexEntryType", b =>
                {
                    b.Property<Guid>("LfLexEntryRefGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VariantEntryTypesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfLexEntryRefGuid", "VariantEntryTypesGuid");

                    b.HasIndex("VariantEntryTypesGuid");

                    b.ToTable("LexEntryRef_VariantEntryTypes_Possibility", (string)null);
                });

            modelBuilder.Entity("LfLexEntryRefLfLexEntryType1", b =>
                {
                    b.Property<Guid>("ComplexEntryTypesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfLexEntryRef1Guid")
                        .HasColumnType("uuid");

                    b.HasKey("ComplexEntryTypesGuid", "LfLexEntryRef1Guid");

                    b.HasIndex("LfLexEntryRef1Guid");

                    b.ToTable("LexEntryRef_ComplexEntryTypes_Possibility", (string)null);
                });

            modelBuilder.Entity("LfLexEntryRefLfObjectId", b =>
                {
                    b.Property<Guid>("LfLexEntryRefGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrimaryLexemesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfLexEntryRefGuid", "PrimaryLexemesGuid");

                    b.HasIndex("PrimaryLexemesGuid");

                    b.ToTable("LexEntryRef_PrimaryLexemes_ObjectId", (string)null);
                });

            modelBuilder.Entity("LfLexEntryRefLfObjectId1", b =>
                {
                    b.Property<Guid>("ComponentLexemesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfLexEntryRef1Guid")
                        .HasColumnType("uuid");

                    b.HasKey("ComponentLexemesGuid", "LfLexEntryRef1Guid");

                    b.HasIndex("LfLexEntryRef1Guid");

                    b.ToTable("LexEntryRef_ComponentLexemes_ObjectId", (string)null);
                });

            modelBuilder.Entity("LfLexEntryRefLfObjectId2", b =>
                {
                    b.Property<Guid>("LfLexEntryRef2Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ShowComplexFormsInGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfLexEntryRef2Guid", "ShowComplexFormsInGuid");

                    b.HasIndex("ShowComplexFormsInGuid");

                    b.ToTable("LexEntryRef_ShowComplexFormsIn_ObjectId", (string)null);
                });

            modelBuilder.Entity("LfLexEtymologyLfPossibility", b =>
                {
                    b.Property<Guid>("LanguageGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfLexEtymologyGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LanguageGuid", "LfLexEtymologyGuid");

                    b.HasIndex("LfLexEtymologyGuid");

                    b.ToTable("LexEtymology_Language_Possibility", (string)null);
                });

            modelBuilder.Entity("LfLexExampleSentenceLfPossibility", b =>
                {
                    b.Property<Guid>("DoNotPublishInGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfLexExampleSentenceGuid")
                        .HasColumnType("uuid");

                    b.HasKey("DoNotPublishInGuid", "LfLexExampleSentenceGuid");

                    b.HasIndex("LfLexExampleSentenceGuid");

                    b.ToTable("LexExampleSentence_DoNotPublishIn_Possibility", (string)null);
                });

            modelBuilder.Entity("LfLexPronunciationLfPossibility", b =>
                {
                    b.Property<Guid>("DoNotPublishInGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfLexPronunciationGuid")
                        .HasColumnType("uuid");

                    b.HasKey("DoNotPublishInGuid", "LfLexPronunciationGuid");

                    b.HasIndex("LfLexPronunciationGuid");

                    b.ToTable("LexPronunciation_DoNotPublishIn_Possibility", (string)null);
                });

            modelBuilder.Entity("LfLexReferenceLfObjectId", b =>
                {
                    b.Property<Guid>("LfLexReferenceGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfLexReferenceGuid", "TargetsGuid");

                    b.HasIndex("TargetsGuid");

                    b.ToTable("LexReference_Targets_ObjectId", (string)null);
                });

            modelBuilder.Entity("LfLexSenseLfPossibility", b =>
                {
                    b.Property<Guid>("DomainTypesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfLexSense1Guid")
                        .HasColumnType("uuid");

                    b.HasKey("DomainTypesGuid", "LfLexSense1Guid");

                    b.HasIndex("LfLexSense1Guid");

                    b.ToTable("LexSense_DomainTypes_Possibility", (string)null);
                });

            modelBuilder.Entity("LfLexSenseLfPossibility1", b =>
                {
                    b.Property<Guid>("LfLexSense2Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThesaurusItemsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfLexSense2Guid", "ThesaurusItemsGuid");

                    b.HasIndex("ThesaurusItemsGuid");

                    b.ToTable("LexSense_ThesaurusItems_Possibility", (string)null);
                });

            modelBuilder.Entity("LfLexSenseLfPossibility2", b =>
                {
                    b.Property<Guid>("LfLexSense3Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsageTypesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfLexSense3Guid", "UsageTypesGuid");

                    b.HasIndex("UsageTypesGuid");

                    b.ToTable("LexSense_UsageTypes_Possibility", (string)null);
                });

            modelBuilder.Entity("LfLexSenseLfPossibility3", b =>
                {
                    b.Property<Guid>("DoNotPublishInGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfLexSense4Guid")
                        .HasColumnType("uuid");

                    b.HasKey("DoNotPublishInGuid", "LfLexSense4Guid");

                    b.HasIndex("LfLexSense4Guid");

                    b.ToTable("LexSense_DoNotPublishIn_Possibility", (string)null);
                });

            modelBuilder.Entity("LfLexSenseLfPossibility4", b =>
                {
                    b.Property<Guid>("DialectLabelsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfLexSense5Guid")
                        .HasColumnType("uuid");

                    b.HasKey("DialectLabelsGuid", "LfLexSense5Guid");

                    b.HasIndex("LfLexSense5Guid");

                    b.ToTable("LexSense_DialectLabels_Possibility", (string)null);
                });

            modelBuilder.Entity("LfLexSenseLfReversalIndexEntry", b =>
                {
                    b.Property<Guid>("LfReversalIndexEntryGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SensesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfReversalIndexEntryGuid", "SensesGuid");

                    b.HasIndex("SensesGuid");

                    b.ToTable("ReversalIndexEntry_Senses_LexSense", (string)null);
                });

            modelBuilder.Entity("LfLexSenseLfSemanticDomain", b =>
                {
                    b.Property<Guid>("LfLexSenseGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SemanticDomainsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfLexSenseGuid", "SemanticDomainsGuid");

                    b.HasIndex("SemanticDomainsGuid");

                    b.ToTable("LexSense_SemanticDomains_Possibility", (string)null);
                });

            modelBuilder.Entity("LfLocationLfPerson", b =>
                {
                    b.Property<Guid>("LfPersonGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlacesOfResidenceGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfPersonGuid", "PlacesOfResidenceGuid");

                    b.HasIndex("PlacesOfResidenceGuid");

                    b.ToTable("Person_PlacesOfResidence_Possibility", (string)null);
                });

            modelBuilder.Entity("LfLocationLfRnGenericRec", b =>
                {
                    b.Property<Guid>("LfRnGenericRecGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfRnGenericRecGuid", "LocationsGuid");

                    b.HasIndex("LocationsGuid");

                    b.ToTable("RnGenericRec_Locations_Possibility", (string)null);
                });

            modelBuilder.Entity("LfMoAffixAllomorphLfPhEnvironment", b =>
                {
                    b.Property<Guid>("LfMoAffixAllomorphGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PhoneEnvGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoAffixAllomorphGuid", "PhoneEnvGuid");

                    b.HasIndex("PhoneEnvGuid");

                    b.ToTable("MoAffixAllomorph_PhoneEnv_PhEnvironment", (string)null);
                });

            modelBuilder.Entity("LfMoAffixAllomorphLfPhEnvironment1", b =>
                {
                    b.Property<Guid>("LfMoAffixAllomorph1Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PositionGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoAffixAllomorph1Guid", "PositionGuid");

                    b.HasIndex("PositionGuid");

                    b.ToTable("MoAffixAllomorph_Position_PhEnvironment", (string)null);
                });

            modelBuilder.Entity("LfMoAffixFormLfMoInflClass", b =>
                {
                    b.Property<Guid>("InflectionClassesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfMoAffixFormGuid")
                        .HasColumnType("uuid");

                    b.HasKey("InflectionClassesGuid", "LfMoAffixFormGuid");

                    b.HasIndex("LfMoAffixFormGuid");

                    b.ToTable("MoAffixForm_InflectionClasses_MoInflClass", (string)null);
                });

            modelBuilder.Entity("LfMoAlloAdhocProhibLfMoForm", b =>
                {
                    b.Property<Guid>("AllomorphsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfMoAlloAdhocProhibGuid")
                        .HasColumnType("uuid");

                    b.HasKey("AllomorphsGuid", "LfMoAlloAdhocProhibGuid");

                    b.HasIndex("LfMoAlloAdhocProhibGuid");

                    b.ToTable("MoAlloAdhocProhib_Allomorphs_MoForm", (string)null);
                });

            modelBuilder.Entity("LfMoAlloAdhocProhibLfMoForm1", b =>
                {
                    b.Property<Guid>("LfMoAlloAdhocProhib1Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RestOfAllosGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoAlloAdhocProhib1Guid", "RestOfAllosGuid");

                    b.HasIndex("RestOfAllosGuid");

                    b.ToTable("MoAlloAdhocProhib_RestOfAllos_MoForm", (string)null);
                });

            modelBuilder.Entity("LfMoCompoundRuleLfPossibility", b =>
                {
                    b.Property<Guid>("LfMoCompoundRuleGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToProdRestrictGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoCompoundRuleGuid", "ToProdRestrictGuid");

                    b.HasIndex("ToProdRestrictGuid");

                    b.ToTable("MoCompoundRule_ToProdRestrict_Possibility", (string)null);
                });

            modelBuilder.Entity("LfMoCompoundRuleLfWfiAnalysis", b =>
                {
                    b.Property<Guid>("CompoundRuleAppsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfWfiAnalysisGuid")
                        .HasColumnType("uuid");

                    b.HasKey("CompoundRuleAppsGuid", "LfWfiAnalysisGuid");

                    b.HasIndex("LfWfiAnalysisGuid");

                    b.ToTable("WfiAnalysis_CompoundRuleApps_MoCompoundRule", (string)null);
                });

            modelBuilder.Entity("LfMoDerivAffMsaLfPossibility", b =>
                {
                    b.Property<Guid>("FromProdRestrictGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfMoDerivAffMsaGuid")
                        .HasColumnType("uuid");

                    b.HasKey("FromProdRestrictGuid", "LfMoDerivAffMsaGuid");

                    b.HasIndex("LfMoDerivAffMsaGuid");

                    b.ToTable("MoDerivAffMsa_FromProdRestrict_Possibility", (string)null);
                });

            modelBuilder.Entity("LfMoDerivAffMsaLfPossibility1", b =>
                {
                    b.Property<Guid>("LfMoDerivAffMsa1Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ToProdRestrictGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoDerivAffMsa1Guid", "ToProdRestrictGuid");

                    b.HasIndex("ToProdRestrictGuid");

                    b.ToTable("MoDerivAffMsa_ToProdRestrict_Possibility", (string)null);
                });

            modelBuilder.Entity("LfMoDerivStepMsaLfPossibility", b =>
                {
                    b.Property<Guid>("LfMoDerivStepMsaGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProdRestrictGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoDerivStepMsaGuid", "ProdRestrictGuid");

                    b.HasIndex("ProdRestrictGuid");

                    b.ToTable("MoDerivStepMsa_ProdRestrict_Possibility", (string)null);
                });

            modelBuilder.Entity("LfMoGlossItemLfMoMorphSynAnalysis", b =>
                {
                    b.Property<Guid>("GlossBundleGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfMoMorphSynAnalysisGuid")
                        .HasColumnType("uuid");

                    b.HasKey("GlossBundleGuid", "LfMoMorphSynAnalysisGuid");

                    b.HasIndex("LfMoMorphSynAnalysisGuid");

                    b.ToTable("MoMorphSynAnalysis_GlossBundle_MoGlossItem", (string)null);
                });

            modelBuilder.Entity("LfMoInflAffMsaLfMoInflAffixSlot", b =>
                {
                    b.Property<Guid>("LfMoInflAffMsaGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SlotsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoInflAffMsaGuid", "SlotsGuid");

                    b.HasIndex("SlotsGuid");

                    b.ToTable("MoInflAffMsa_Slots_MoInflAffixSlot", (string)null);
                });

            modelBuilder.Entity("LfMoInflAffMsaLfPossibility", b =>
                {
                    b.Property<Guid>("FromProdRestrictGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfMoInflAffMsaGuid")
                        .HasColumnType("uuid");

                    b.HasKey("FromProdRestrictGuid", "LfMoInflAffMsaGuid");

                    b.HasIndex("LfMoInflAffMsaGuid");

                    b.ToTable("MoInflAffMsa_FromProdRestrict_Possibility", (string)null);
                });

            modelBuilder.Entity("LfMoInflAffixSlotLfMoInflAffixTemplate", b =>
                {
                    b.Property<Guid>("LfMoInflAffixTemplateGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SlotsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoInflAffixTemplateGuid", "SlotsGuid");

                    b.HasIndex("SlotsGuid");

                    b.ToTable("MoInflAffixTemplate_Slots_MoInflAffixSlot", (string)null);
                });

            modelBuilder.Entity("LfMoInflAffixSlotLfMoInflAffixTemplate1", b =>
                {
                    b.Property<Guid>("LfMoInflAffixTemplate1Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrefixSlotsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoInflAffixTemplate1Guid", "PrefixSlotsGuid");

                    b.HasIndex("PrefixSlotsGuid");

                    b.ToTable("MoInflAffixTemplate_PrefixSlots_MoInflAffixSlot", (string)null);
                });

            modelBuilder.Entity("LfMoInflAffixSlotLfMoInflAffixTemplate2", b =>
                {
                    b.Property<Guid>("LfMoInflAffixTemplate2Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SuffixSlotsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoInflAffixTemplate2Guid", "SuffixSlotsGuid");

                    b.HasIndex("SuffixSlotsGuid");

                    b.ToTable("MoInflAffixTemplate_SuffixSlots_MoInflAffixSlot", (string)null);
                });

            modelBuilder.Entity("LfMoInflAffixSlotLfMoInflAffixTemplate3", b =>
                {
                    b.Property<Guid>("LfMoInflAffixTemplate3Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProcliticSlotsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoInflAffixTemplate3Guid", "ProcliticSlotsGuid");

                    b.HasIndex("ProcliticSlotsGuid");

                    b.ToTable("MoInflAffixTemplate_ProcliticSlots_MoInflAffixSlot", (string)null);
                });

            modelBuilder.Entity("LfMoInflAffixSlotLfMoInflAffixTemplate4", b =>
                {
                    b.Property<Guid>("EncliticSlotsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfMoInflAffixTemplate4Guid")
                        .HasColumnType("uuid");

                    b.HasKey("EncliticSlotsGuid", "LfMoInflAffixTemplate4Guid");

                    b.HasIndex("LfMoInflAffixTemplate4Guid");

                    b.ToTable("MoInflAffixTemplate_EncliticSlots_MoInflAffixSlot", (string)null);
                });

            modelBuilder.Entity("LfMoInflAffixSlotLfMoStemMsa", b =>
                {
                    b.Property<Guid>("LfMoStemMsaGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SlotsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoStemMsaGuid", "SlotsGuid");

                    b.HasIndex("SlotsGuid");

                    b.ToTable("MoStemMsa_Slots_MoInflAffixSlot", (string)null);
                });

            modelBuilder.Entity("LfMoInflAffixTemplateLfWfiAnalysis", b =>
                {
                    b.Property<Guid>("InflTemplateAppsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfWfiAnalysisGuid")
                        .HasColumnType("uuid");

                    b.HasKey("InflTemplateAppsGuid", "LfWfiAnalysisGuid");

                    b.HasIndex("LfWfiAnalysisGuid");

                    b.ToTable("WfiAnalysis_InflTemplateApps_MoInflAffixTemplate", (string)null);
                });

            modelBuilder.Entity("LfMoInsertPhonesLfPhTerminalUnit", b =>
                {
                    b.Property<Guid>("ContentGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfMoInsertPhonesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("ContentGuid", "LfMoInsertPhonesGuid");

                    b.HasIndex("LfMoInsertPhonesGuid");

                    b.ToTable("MoInsertPhones_Content_PhTerminalUnit", (string)null);
                });

            modelBuilder.Entity("LfMoMorphAdhocProhibLfMoMorphSynAnalysis", b =>
                {
                    b.Property<Guid>("LfMoMorphAdhocProhibGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MorphemesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoMorphAdhocProhibGuid", "MorphemesGuid");

                    b.HasIndex("MorphemesGuid");

                    b.ToTable("MoMorphAdhocProhib_Morphemes_MoMorphSynAnalysis", (string)null);
                });

            modelBuilder.Entity("LfMoMorphAdhocProhibLfMoMorphSynAnalysis1", b =>
                {
                    b.Property<Guid>("LfMoMorphAdhocProhib1Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RestOfMorphsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoMorphAdhocProhib1Guid", "RestOfMorphsGuid");

                    b.HasIndex("RestOfMorphsGuid");

                    b.ToTable("MoMorphAdhocProhib_RestOfMorphs_MoMorphSynAnalysis", (string)null);
                });

            modelBuilder.Entity("LfMoMorphSynAnalysisLfMoMorphSynAnalysis", b =>
                {
                    b.Property<Guid>("ComponentsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfMoMorphSynAnalysisGuid")
                        .HasColumnType("uuid");

                    b.HasKey("ComponentsGuid", "LfMoMorphSynAnalysisGuid");

                    b.HasIndex("LfMoMorphSynAnalysisGuid");

                    b.ToTable("MoMorphSynAnalysis_Components_MoMorphSynAnalysis", (string)null);
                });

            modelBuilder.Entity("LfMoStemAllomorphLfPhEnvironment", b =>
                {
                    b.Property<Guid>("LfMoStemAllomorphGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PhoneEnvGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoStemAllomorphGuid", "PhoneEnvGuid");

                    b.HasIndex("PhoneEnvGuid");

                    b.ToTable("MoStemAllomorph_PhoneEnv_PhEnvironment", (string)null);
                });

            modelBuilder.Entity("LfMoStemMsaLfPartOfSpeech", b =>
                {
                    b.Property<Guid>("FromPartsOfSpeechGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfMoStemMsa1Guid")
                        .HasColumnType("uuid");

                    b.HasKey("FromPartsOfSpeechGuid", "LfMoStemMsa1Guid");

                    b.HasIndex("LfMoStemMsa1Guid");

                    b.ToTable("MoStemMsa_FromPartsOfSpeech_Possibility", (string)null);
                });

            modelBuilder.Entity("LfMoStemMsaLfPossibility", b =>
                {
                    b.Property<Guid>("LfMoStemMsaGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProdRestrictGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfMoStemMsaGuid", "ProdRestrictGuid");

                    b.HasIndex("ProdRestrictGuid");

                    b.ToTable("MoStemMsa_ProdRestrict_Possibility", (string)null);
                });

            modelBuilder.Entity("LfObjectIdLfStTxtPara", b =>
                {
                    b.Property<Guid>("LfStTxtParaGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TextObjectsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfStTxtParaGuid", "TextObjectsGuid");

                    b.HasIndex("TextObjectsGuid");

                    b.ToTable("StTxtPara_TextObjects_ObjectId", (string)null);
                });

            modelBuilder.Entity("LfObjectIdLfVirtualOrdering", b =>
                {
                    b.Property<Guid>("ItemsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfVirtualOrderingGuid")
                        .HasColumnType("uuid");

                    b.HasKey("ItemsGuid", "LfVirtualOrderingGuid");

                    b.HasIndex("LfVirtualOrderingGuid");

                    b.ToTable("VirtualOrdering_Items_ObjectId", (string)null);
                });

            modelBuilder.Entity("LfOverlayLfPossibility", b =>
                {
                    b.Property<Guid>("LfOverlayGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PossItemsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfOverlayGuid", "PossItemsGuid");

                    b.HasIndex("PossItemsGuid");

                    b.ToTable("Overlay_PossItems_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPartOfSpeechLfPhSegRuleRHS", b =>
                {
                    b.Property<Guid>("InputPOSesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfPhSegRuleRHSGuid")
                        .HasColumnType("uuid");

                    b.HasKey("InputPOSesGuid", "LfPhSegRuleRHSGuid");

                    b.HasIndex("LfPhSegRuleRHSGuid");

                    b.ToTable("PhSegRuleRHS_InputPOSes_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPersonLfPossibility", b =>
                {
                    b.Property<Guid>("LfPossibility1Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResearchersGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfPossibility1Guid", "ResearchersGuid");

                    b.HasIndex("ResearchersGuid");

                    b.ToTable("Possibility_Researchers_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPersonLfPossibility1", b =>
                {
                    b.Property<Guid>("LfPerson1Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PositionsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfPerson1Guid", "PositionsGuid");

                    b.HasIndex("PositionsGuid");

                    b.ToTable("Person_Positions_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPersonLfRnGenericRec", b =>
                {
                    b.Property<Guid>("LfRnGenericRecGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResearchersGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfRnGenericRecGuid", "ResearchersGuid");

                    b.HasIndex("ResearchersGuid");

                    b.ToTable("RnGenericRec_Researchers_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPersonLfRnGenericRec1", b =>
                {
                    b.Property<Guid>("LfRnGenericRec3Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SourcesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfRnGenericRec3Guid", "SourcesGuid");

                    b.HasIndex("SourcesGuid");

                    b.ToTable("RnGenericRec_Sources_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPersonLfRnRoledPartic", b =>
                {
                    b.Property<Guid>("LfRnRoledParticGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParticipantsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfRnRoledParticGuid", "ParticipantsGuid");

                    b.HasIndex("ParticipantsGuid");

                    b.ToTable("RnRoledPartic_Participants_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPhFeatureConstraintLfPhSimpleContextNC", b =>
                {
                    b.Property<Guid>("LfPhSimpleContextNCGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlusConstrGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfPhSimpleContextNCGuid", "PlusConstrGuid");

                    b.HasIndex("PlusConstrGuid");

                    b.ToTable("PhSimpleContextNC_PlusConstr_PhFeatureConstraint", (string)null);
                });

            modelBuilder.Entity("LfPhFeatureConstraintLfPhSimpleContextNC1", b =>
                {
                    b.Property<Guid>("LfPhSimpleContextNC1Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MinusConstrGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfPhSimpleContextNC1Guid", "MinusConstrGuid");

                    b.HasIndex("MinusConstrGuid");

                    b.ToTable("PhSimpleContextNC_MinusConstr_PhFeatureConstraint", (string)null);
                });

            modelBuilder.Entity("LfPhNCSegmentsLfPhPhoneme", b =>
                {
                    b.Property<Guid>("LfPhNCSegmentsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SegmentsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfPhNCSegmentsGuid", "SegmentsGuid");

                    b.HasIndex("SegmentsGuid");

                    b.ToTable("PhNCSegments_Segments_PhTerminalUnit", (string)null);
                });

            modelBuilder.Entity("LfPhPhonContextLfPhSequenceContext", b =>
                {
                    b.Property<Guid>("LfPhSequenceContextGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MembersGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfPhSequenceContextGuid", "MembersGuid");

                    b.HasIndex("MembersGuid");

                    b.ToTable("PhSequenceContext_Members_PhContextOrVar", (string)null);
                });

            modelBuilder.Entity("LfPhPhonRuleFeatLfPhSegRuleRHS", b =>
                {
                    b.Property<Guid>("ExclRuleFeatsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfPhSegRuleRHSGuid")
                        .HasColumnType("uuid");

                    b.HasKey("ExclRuleFeatsGuid", "LfPhSegRuleRHSGuid");

                    b.HasIndex("LfPhSegRuleRHSGuid");

                    b.ToTable("PhSegRuleRHS_ExclRuleFeats_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPhPhonRuleFeatLfPhSegRuleRHS1", b =>
                {
                    b.Property<Guid>("LfPhSegRuleRHS1Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReqRuleFeatsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfPhSegRuleRHS1Guid", "ReqRuleFeatsGuid");

                    b.HasIndex("ReqRuleFeatsGuid");

                    b.ToTable("PhSegRuleRHS_ReqRuleFeats_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPictureLfPossibility", b =>
                {
                    b.Property<Guid>("DoNotPublishInGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfPictureGuid")
                        .HasColumnType("uuid");

                    b.HasKey("DoNotPublishInGuid", "LfPictureGuid");

                    b.HasIndex("LfPictureGuid");

                    b.ToTable("Picture_DoNotPublishIn_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPossibilityLfPossibility", b =>
                {
                    b.Property<Guid>("LfPossibilityGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RestrictionsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfPossibilityGuid", "RestrictionsGuid");

                    b.HasIndex("RestrictionsGuid");

                    b.ToTable("Possibility_Restrictions_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPossibilityLfRnGenericRec", b =>
                {
                    b.Property<Guid>("LfRnGenericRec1Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RestrictionsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfRnGenericRec1Guid", "RestrictionsGuid");

                    b.HasIndex("RestrictionsGuid");

                    b.ToTable("RnGenericRec_Restrictions_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPossibilityLfRnGenericRec1", b =>
                {
                    b.Property<Guid>("LfRnGenericRec2Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PhraseTagsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfRnGenericRec2Guid", "PhraseTagsGuid");

                    b.HasIndex("PhraseTagsGuid");

                    b.ToTable("RnGenericRec_PhraseTags_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPossibilityLfRnGenericRec2", b =>
                {
                    b.Property<Guid>("LfRnGenericRec4Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TimeOfEventGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfRnGenericRec4Guid", "TimeOfEventGuid");

                    b.HasIndex("TimeOfEventGuid");

                    b.ToTable("RnGenericRec_TimeOfEvent_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPossibilityLfScrScriptureNote", b =>
                {
                    b.Property<Guid>("CategoriesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfScrScriptureNoteGuid")
                        .HasColumnType("uuid");

                    b.HasKey("CategoriesGuid", "LfScrScriptureNoteGuid");

                    b.HasIndex("LfScrScriptureNoteGuid");

                    b.ToTable("ScrScriptureNote_Categories_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPossibilityLfText", b =>
                {
                    b.Property<Guid>("GenresGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfTextGuid")
                        .HasColumnType("uuid");

                    b.HasKey("GenresGuid", "LfTextGuid");

                    b.HasIndex("LfTextGuid");

                    b.ToTable("Text_Genres_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPossibilityLfWordFormLookup", b =>
                {
                    b.Property<Guid>("LfWordFormLookupGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThesaurusItemsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfWordFormLookupGuid", "ThesaurusItemsGuid");

                    b.HasIndex("ThesaurusItemsGuid");

                    b.ToTable("WordFormLookup_ThesaurusItems_Possibility", (string)null);
                });

            modelBuilder.Entity("LfPossibilityPossibilityListCustomFieldValue", b =>
                {
                    b.Property<Guid>("PossibilityListCustomFieldValueGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ValueGuid")
                        .HasColumnType("uuid");

                    b.HasKey("PossibilityListCustomFieldValueGuid", "ValueGuid");

                    b.HasIndex("ValueGuid");

                    b.ToTable("PossibilityListCustomFieldValue_Value_Possibility", (string)null);
                });

            modelBuilder.Entity("LfReminderLfRnGenericRec", b =>
                {
                    b.Property<Guid>("LfRnGenericRecGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RemindersGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfRnGenericRecGuid", "RemindersGuid");

                    b.HasIndex("RemindersGuid");

                    b.ToTable("RnGenericRec_Reminders_Reminder", (string)null);
                });

            modelBuilder.Entity("LfRnGenericRecLfRnGenericRec", b =>
                {
                    b.Property<Guid>("LfRnGenericRecGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeeAlsoGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfRnGenericRecGuid", "SeeAlsoGuid");

                    b.HasIndex("SeeAlsoGuid");

                    b.ToTable("RnGenericRec_SeeAlso_RnGenericRec", (string)null);
                });

            modelBuilder.Entity("LfRnGenericRecLfRnGenericRec1", b =>
                {
                    b.Property<Guid>("CounterEvidenceGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfRnGenericRec1Guid")
                        .HasColumnType("uuid");

                    b.HasKey("CounterEvidenceGuid", "LfRnGenericRec1Guid");

                    b.HasIndex("LfRnGenericRec1Guid");

                    b.ToTable("RnGenericRec_CounterEvidence_RnGenericRec", (string)null);
                });

            modelBuilder.Entity("LfRnGenericRecLfRnGenericRec2", b =>
                {
                    b.Property<Guid>("LfRnGenericRec2Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupersededByGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfRnGenericRec2Guid", "SupersededByGuid");

                    b.HasIndex("SupersededByGuid");

                    b.ToTable("RnGenericRec_SupersededBy_RnGenericRec", (string)null);
                });

            modelBuilder.Entity("LfRnGenericRecLfRnGenericRec3", b =>
                {
                    b.Property<Guid>("LfRnGenericRec3Guid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SupportingEvidenceGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfRnGenericRec3Guid", "SupportingEvidenceGuid");

                    b.HasIndex("SupportingEvidenceGuid");

                    b.ToTable("RnGenericRec_SupportingEvidence_RnGenericRec", (string)null);
                });

            modelBuilder.Entity("LfSemanticDomainLfSemanticDomain", b =>
                {
                    b.Property<Guid>("LfSemanticDomainGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RelatedDomainsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfSemanticDomainGuid", "RelatedDomainsGuid");

                    b.HasIndex("RelatedDomainsGuid");

                    b.ToTable("SemanticDomain_RelatedDomains_Possibility", (string)null);
                });

            modelBuilder.Entity("LfUserAppFeatActLfUserConfigAcct", b =>
                {
                    b.Property<Guid>("LfUserAppFeatActGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserConfigAcctGuid")
                        .HasColumnType("uuid");

                    b.HasKey("LfUserAppFeatActGuid", "UserConfigAcctGuid");

                    b.HasIndex("UserConfigAcctGuid");

                    b.ToTable("UserAppFeatAct_UserConfigAcct_UserConfigAcct", (string)null);
                });

            modelBuilder.Entity("LfWfiWordSetLfWfiWordform", b =>
                {
                    b.Property<Guid>("CasesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LfWfiWordSetGuid")
                        .HasColumnType("uuid");

                    b.HasKey("CasesGuid", "LfWfiWordSetGuid");

                    b.HasIndex("LfWfiWordSetGuid");

                    b.ToTable("WfiWordSet_Cases_WfiWordform", (string)null);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.CustomFieldConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CustomFieldConfigs");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.CustomFieldValue", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ConfigId")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("LfLexEntryGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LfLexExampleSentenceGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LfLexSenseGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LfMoFormGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ConfigId");

                    b.HasIndex("LfLexEntryGuid");

                    b.HasIndex("LfLexExampleSentenceGuid");

                    b.HasIndex("LfLexSenseGuid");

                    b.HasIndex("LfMoFormGuid");

                    b.ToTable("CustomFieldValues");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CustomFieldValue");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfAgent", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApprovesGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DisapprovesGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("Human")
                        .HasColumnType("boolean");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("NotesGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Project_AnalyzingAgentsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("StateInformation")
                        .HasColumnType("text");

                    b.Property<string>("Version")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("ApprovesGuid")
                        .IsUnique();

                    b.HasIndex("DisapprovesGuid")
                        .IsUnique();

                    b.HasIndex("NotesGuid")
                        .IsUnique();

                    b.HasIndex("Project_AnalyzingAgentsGuid");

                    b.ToTable("Agents");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfAgentEvaluation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("AgentEvaluations");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfAnalysis", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnalysisGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<bool>("HasWordform")
                        .HasColumnType("boolean");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WordformGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("AnalysisGuid");

                    b.HasIndex("WordformGuid");

                    b.ToTable("Analysiss");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfAnnotation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnnotationTypeGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Comment")
                        .HasColumnType("jsonb");

                    b.Property<string>("CompDetails")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FeaturesGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("InstanceOfGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Project_AnnotationsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SourceGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TextGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("AnnotationTypeGuid");

                    b.HasIndex("FeaturesGuid")
                        .IsUnique();

                    b.HasIndex("InstanceOfGuid");

                    b.HasIndex("Project_AnnotationsGuid");

                    b.HasIndex("SourceGuid");

                    b.HasIndex("TextGuid")
                        .IsUnique();

                    b.ToTable("Annotations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfAnnotation");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfCell", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("Contents")
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Row_CellsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("Row_CellsGuid");

                    b.ToTable("Cells");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfChkRef", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<string>("KeyWord")
                        .HasColumnType("text");

                    b.Property<int>("Location")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Possibility_OccurrencesGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Ref")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RenderingGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("Possibility_OccurrencesGuid");

                    b.HasIndex("RenderingGuid");

                    b.ToTable("ChkRefs");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfChkRendering", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Explanation")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MeaningGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Possibility_RenderingsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SurfaceFormGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("MeaningGuid");

                    b.HasIndex("Possibility_RenderingsGuid");

                    b.HasIndex("SurfaceFormGuid");

                    b.ToTable("ChkRenderings");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfChkSense", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Explanation")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SenseGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("SenseGuid");

                    b.ToTable("ChkSenses");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfConstChartRow", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("ClauseType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DsChart_RowsGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("EndDependentClauseGroup")
                        .HasColumnType("boolean");

                    b.Property<bool>("EndParagraph")
                        .HasColumnType("boolean");

                    b.Property<bool>("EndSentence")
                        .HasColumnType("boolean");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<bool>("StartDependentClauseGroup")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("DsChart_RowsGuid");

                    b.ToTable("ConstChartRows");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfConstituentChartCellPart", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ColumnGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConstChartRow_CellsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<bool>("MergesAfter")
                        .HasColumnType("boolean");

                    b.Property<bool>("MergesBefore")
                        .HasColumnType("boolean");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("ColumnGuid");

                    b.HasIndex("ConstChartRow_CellsGuid");

                    b.ToTable("ConstituentChartCellParts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfConstituentChartCellPart");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfCrossReference", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Comment")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RnResearchNbk_CrossReferencesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("RnResearchNbk_CrossReferencesGuid");

                    b.ToTable("CrossReferences");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfDomainQ", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("ExampleSentences")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("ExampleWords")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Possibility_QuestionsGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Question")
                        .HasColumnType("jsonb");

                    b.HasKey("Guid");

                    b.HasIndex("Possibility_QuestionsGuid");

                    b.ToTable("DomainQs");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfDsChart", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DsDiscourseData_ChartsGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("TemplateGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("DsDiscourseData_ChartsGuid");

                    b.HasIndex("TemplateGuid");

                    b.ToTable("DsCharts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfDsChart");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfDsDiscourseData", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ChartMarkersGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ConstChartTemplGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("ChartMarkersGuid")
                        .IsUnique();

                    b.HasIndex("ConstChartTemplGuid")
                        .IsUnique();

                    b.ToTable("DsDiscourseDatas");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFile", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Copyright")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("Folder_FilesGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<string>("InternalPath")
                        .HasColumnType("text");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<string>("OriginalPath")
                        .HasColumnType("text");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ScrImportSource_FilesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("Folder_FilesGuid");

                    b.HasIndex("ScrImportSource_FilesGuid");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFilter", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("App")
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<string>("ColumnInfo")
                        .HasColumnType("text");

                    b.Property<int>("FieldId")
                        .HasColumnType("integer");

                    b.Property<string>("FieldInfo")
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Project_FiltersGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("PromptText")
                        .HasColumnType("text");

                    b.Property<int>("ShowPrompt")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("Project_FiltersGuid");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFolder", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("Folder_SubFoldersGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Project_MediaGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Project_PicturesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("Folder_SubFoldersGuid");

                    b.HasIndex("Project_MediaGuid");

                    b.HasIndex("Project_PicturesGuid");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsAbstractStructure", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("FsAbstractStructures");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfFsAbstractStructure");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsFeatDefn", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Abbreviation")
                        .HasColumnType("jsonb");

                    b.Property<string>("CatalogSourceId")
                        .HasColumnType("text");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DefaultGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("DisplayToRightOfValues")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("FsFeatureSystem_FeaturesGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("GlossAbbreviation")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("RightGlossSep")
                        .HasColumnType("jsonb");

                    b.Property<bool>("ShowInGloss")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("DefaultGuid")
                        .IsUnique();

                    b.HasIndex("FsFeatureSystem_FeaturesGuid");

                    b.ToTable("FsFeatDefns");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfFsFeatDefn");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsFeatStrucType", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Abbreviation")
                        .HasColumnType("jsonb");

                    b.Property<string>("CatalogSourceId")
                        .HasColumnType("text");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("FsFeatureSystem_TypesGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("FsFeatureSystem_TypesGuid");

                    b.ToTable("FsFeatStrucTypes");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsFeatureSpecification", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FeatureGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FsAbsStruc_FeatureSpecsGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<int>("RefNumber")
                        .HasColumnType("integer");

                    b.Property<int>("ValueState")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("FeatureGuid");

                    b.HasIndex("FsAbsStruc_FeatureSpecsGuid");

                    b.ToTable("FsFeatureSpecifications");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfFsFeatureSpecification");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsFeatureSystem", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("FsFeatureSystems");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsSymFeatVal", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Abbreviation")
                        .HasColumnType("jsonb");

                    b.Property<string>("CatalogSourceId")
                        .HasColumnType("text");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("FsFeatDefn_ValuesGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("GlossAbbreviation")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("RightGlossSep")
                        .HasColumnType("jsonb");

                    b.Property<bool>("ShowInGloss")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("FsFeatDefn_ValuesGuid");

                    b.ToTable("FsSymFeatVals");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexAppendix", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ContentsGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LexDb_AppendixesGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("ContentsGuid")
                        .IsUnique();

                    b.HasIndex("LexDb_AppendixesGuid");

                    b.ToTable("LexAppendixs");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexDb", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ComplexEntryTypesGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("DialectLabelsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DomainTypesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExtendedNoteTypesGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("IntroductionGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsBodyInSeparateSubentry")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHeadwordCitationForm")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LanguagesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MorphTypesGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PublicationTypesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReferencesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SenseTypesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsageTypesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VariantEntryTypesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ComplexEntryTypesGuid")
                        .IsUnique();

                    b.HasIndex("DialectLabelsGuid")
                        .IsUnique();

                    b.HasIndex("DomainTypesGuid")
                        .IsUnique();

                    b.HasIndex("ExtendedNoteTypesGuid")
                        .IsUnique();

                    b.HasIndex("IntroductionGuid")
                        .IsUnique();

                    b.HasIndex("LanguagesGuid")
                        .IsUnique();

                    b.HasIndex("MorphTypesGuid")
                        .IsUnique();

                    b.HasIndex("PublicationTypesGuid")
                        .IsUnique();

                    b.HasIndex("ReferencesGuid")
                        .IsUnique();

                    b.HasIndex("SenseTypesGuid")
                        .IsUnique();

                    b.HasIndex("UsageTypesGuid")
                        .IsUnique();

                    b.HasIndex("VariantEntryTypesGuid")
                        .IsUnique();

                    b.ToTable("LexDbs");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexEntry", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Bibliography")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("CitationForm")
                        .HasColumnType("jsonb");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Comment")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DoNotUseForParsing")
                        .HasColumnType("boolean");

                    b.Property<int>("HomographNumber")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<string>("ImportResidue")
                        .HasColumnType("text");

                    b.Property<Guid?>("LexemeFormGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("LiftResidue")
                        .HasColumnType("text");

                    b.Property<List<LfWsTsString>>("LiteralMeaning")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Restrictions")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("SummaryDefinition")
                        .HasColumnType("jsonb");

                    b.HasKey("Guid");

                    b.HasIndex("LexemeFormGuid")
                        .IsUnique();

                    b.ToTable("LexEntrys");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexEntryRef", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("HideMinorEntry")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LexEntry_EntryRefsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("LiftResidue")
                        .HasColumnType("text");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<int>("RefType")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Summary")
                        .HasColumnType("jsonb");

                    b.HasKey("Guid");

                    b.HasIndex("LexEntry_EntryRefsGuid");

                    b.ToTable("LexEntryRefs");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexEtymology", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Bibliography")
                        .HasColumnType("jsonb");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Comment")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("Form")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("Gloss")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("LanguageNotes")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("LexEntry_EtymologyGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("LiftResidue")
                        .HasColumnType("text");

                    b.Property<List<LfWsTsString>>("Note")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("PrecComment")
                        .HasColumnType("jsonb");

                    b.HasKey("Guid");

                    b.HasIndex("LexEntry_EtymologyGuid");

                    b.ToTable("LexEtymologys");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexExampleSentence", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Example")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LexExtendedNote_ExamplesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LexSense_ExamplesGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("LiftResidue")
                        .HasColumnType("text");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("LexExtendedNote_ExamplesGuid");

                    b.HasIndex("LexSense_ExamplesGuid");

                    b.ToTable("LexExampleSentences");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexExtendedNote", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Discussion")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("ExtendedNoteTypeGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LexSense_ExtendedNoteGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("ExtendedNoteTypeGuid");

                    b.HasIndex("LexSense_ExtendedNoteGuid");

                    b.ToTable("LexExtendedNotes");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexPronunciation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CVPattern")
                        .HasColumnType("text");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Form")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LexEntry_PronunciationsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("LiftResidue")
                        .HasColumnType("text");

                    b.Property<Guid?>("LocationGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<string>("Tone")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("LexEntry_PronunciationsGuid");

                    b.HasIndex("LocationGuid");

                    b.ToTable("LexPronunciations");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexReference", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Comment")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<string>("LiftResidue")
                        .HasColumnType("text");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Possibility_MembersGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("Possibility_MembersGuid");

                    b.ToTable("LexReferences");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexSense", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("AnthroNote")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("Bibliography")
                        .HasColumnType("jsonb");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Definition")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("DiscourseNote")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("EncyclopedicInfo")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("Exemplar")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("GeneralNote")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("Gloss")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("GrammarNote")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<string>("ImportResidue")
                        .HasColumnType("text");

                    b.Property<Guid?>("LexEntry_SensesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LexSense_SensesGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("LiftResidue")
                        .HasColumnType("text");

                    b.Property<Guid?>("MorphoSyntaxAnalysisGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("PhonologyNote")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("Restrictions")
                        .HasColumnType("jsonb");

                    b.Property<string>("ScientificName")
                        .HasColumnType("text");

                    b.Property<List<LfWsTsString>>("SemanticsNote")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("SenseTypeGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("SocioLinguisticsNote")
                        .HasColumnType("jsonb");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<Guid?>("StatusGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("UsageNote")
                        .HasColumnType("jsonb");

                    b.HasKey("Guid");

                    b.HasIndex("LexEntry_SensesGuid");

                    b.HasIndex("LexSense_SensesGuid");

                    b.HasIndex("MorphoSyntaxAnalysisGuid");

                    b.HasIndex("SenseTypeGuid");

                    b.HasIndex("StatusGuid");

                    b.ToTable("LexSenses");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMedia", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Label")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("LexPronunciation_MediaFilesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MediaFileGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("LexPronunciation_MediaFilesGuid");

                    b.HasIndex("MediaFileGuid");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMediaContainer", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<string>("OffsetType")
                        .HasColumnType("text");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("MediaContainers");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMediaURI", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MediaContainer_MediaURIsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("MediaURI")
                        .HasColumnType("text");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("MediaContainer_MediaURIsGuid");

                    b.ToTable("MediaURIs");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoAdhocProhib", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Adjacency")
                        .HasColumnType("integer");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MoAdhocProhib_MembersGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MoMorphData_AdhocCoProhibitionsGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("MoAdhocProhib_MembersGuid");

                    b.HasIndex("MoMorphData_AdhocCoProhibitionsGuid");

                    b.ToTable("MoAdhocProhibs");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfMoAdhocProhib");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoCompoundRule", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MoMorphData_CompoundRulesGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StratumGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("MoMorphData_CompoundRulesGuid");

                    b.HasIndex("StratumGuid");

                    b.ToTable("MoCompoundRules");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfMoCompoundRule");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoDeriv", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("InflectionalFeatsGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StemFormGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StemMsaGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("InflectionalFeatsGuid")
                        .IsUnique();

                    b.HasIndex("StemFormGuid");

                    b.HasIndex("StemMsaGuid");

                    b.ToTable("MoDerivs");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoDerivTrace", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("OutputForm")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("MoDerivTraces");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfMoDerivTrace");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoForm", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<LfWsTsString>>("Form")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAbstract")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LexEntry_AlternateFormsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("LiftResidue")
                        .HasColumnType("text");

                    b.Property<Guid?>("MorphTypeGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("LexEntry_AlternateFormsGuid");

                    b.HasIndex("MorphTypeGuid");

                    b.ToTable("MoForms");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfMoForm");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoGlossItem", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Abbreviation")
                        .HasColumnType("jsonb");

                    b.Property<string>("AfterSeparator")
                        .HasColumnType("text");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<bool>("ComplexNameFirst")
                        .HasColumnType("boolean");

                    b.Property<string>("ComplexNameSeparator")
                        .HasColumnType("text");

                    b.Property<string>("EticID")
                        .HasColumnType("text");

                    b.Property<Guid?>("FeatStructFragGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MoGlossItem_GlossItemsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MoGlossSystem_GlossesGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("TargetGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("FeatStructFragGuid")
                        .IsUnique();

                    b.HasIndex("MoGlossItem_GlossItemsGuid");

                    b.HasIndex("MoGlossSystem_GlossesGuid");

                    b.HasIndex("TargetGuid");

                    b.ToTable("MoGlossItems");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoGlossSystem", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("MoGlossSystems");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInflAffixSlot", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<bool>("Optional")
                        .HasColumnType("boolean");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Possibility_AffixSlotsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("Possibility_AffixSlotsGuid");

                    b.ToTable("MoInflAffixSlots");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInflAffixTemplate", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("Final")
                        .HasColumnType("boolean");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Possibility_AffixTemplatesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RegionGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StratumGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("Possibility_AffixTemplatesGuid");

                    b.HasIndex("RegionGuid")
                        .IsUnique();

                    b.HasIndex("StratumGuid");

                    b.ToTable("MoInflAffixTemplates");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInflClass", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Abbreviation")
                        .HasColumnType("jsonb");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MoInflClass_SubclassesGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Possibility_InflectionClassesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("MoInflClass_SubclassesGuid");

                    b.HasIndex("Possibility_InflectionClassesGuid");

                    b.ToTable("MoInflClasss");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoMorphData", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("GlossSystemGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<string>("ParserParameters")
                        .HasColumnType("text");

                    b.Property<Guid?>("ProdRestrictGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("GlossSystemGuid")
                        .IsUnique();

                    b.HasIndex("ProdRestrictGuid")
                        .IsUnique();

                    b.ToTable("MoMorphDatas");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoMorphSynAnalysis", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GlossString")
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LexEntry_MorphoSyntaxAnalysesGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("LiftResidue")
                        .HasColumnType("text");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("LexEntry_MorphoSyntaxAnalysesGuid");

                    b.ToTable("MoMorphSynAnalysiss");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfMoMorphSynAnalysis");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoReferralRule", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("InputGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MoInflClass_RulesOfReferralGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("OutputGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Possibility_RulesOfReferralGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("InputGuid")
                        .IsUnique();

                    b.HasIndex("MoInflClass_RulesOfReferralGuid");

                    b.HasIndex("OutputGuid")
                        .IsUnique();

                    b.HasIndex("Possibility_RulesOfReferralGuid");

                    b.ToTable("MoReferralRules");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoRuleMapping", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MoForm_OutputGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("MoForm_OutputGuid");

                    b.ToTable("MoRuleMappings");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfMoRuleMapping");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoStemName", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Abbreviation")
                        .HasColumnType("jsonb");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DefaultAffixGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DefaultStemGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MoInflClass_StemNamesGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Possibility_StemNamesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("DefaultAffixGuid");

                    b.HasIndex("DefaultStemGuid");

                    b.HasIndex("MoInflClass_StemNamesGuid");

                    b.HasIndex("Possibility_StemNamesGuid");

                    b.ToTable("MoStemNames");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoStratum", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Abbreviation")
                        .HasColumnType("jsonb");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MoMorphData_StrataGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PhonemesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("MoMorphData_StrataGuid");

                    b.HasIndex("PhonemesGuid");

                    b.ToTable("MoStratums");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfNote", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Content")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Segment_NotesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("Segment_NotesGuid");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfObjectId", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("StPara_AnalyzedTextObjectsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("StPara_AnalyzedTextObjectsGuid");

                    b.ToTable("ObjectIds");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfOverlay", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PossListGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Project_OverlaysGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("PossListGuid");

                    b.HasIndex("Project_OverlaysGuid");

                    b.ToTable("Overlays");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhCode", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PhTerminalUnit_CodesGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Representation")
                        .HasColumnType("jsonb");

                    b.HasKey("Guid");

                    b.HasIndex("PhTerminalUnit_CodesGuid");

                    b.ToTable("PhCodes");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhContextOrVar", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MoForm_InputGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PhPhonData_ContextsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("MoForm_InputGuid");

                    b.HasIndex("PhPhonData_ContextsGuid");

                    b.ToTable("PhContextOrVars");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfPhContextOrVar");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhEnvironment", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AMPLEStringSegment")
                        .HasColumnType("text");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LeftContextGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PhPhonData_EnvironmentsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RightContextGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("StringRepresentation")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("LeftContextGuid");

                    b.HasIndex("PhPhonData_EnvironmentsGuid");

                    b.HasIndex("RightContextGuid");

                    b.ToTable("PhEnvironments");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhFeatureConstraint", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("FeatureGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PhPhonData_FeatConstraintsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("FeatureGuid");

                    b.HasIndex("PhPhonData_FeatConstraintsGuid");

                    b.ToTable("PhFeatureConstraints");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhNaturalClass", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Abbreviation")
                        .HasColumnType("jsonb");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PhPhonData_NaturalClassesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("PhPhonData_NaturalClassesGuid");

                    b.ToTable("PhNaturalClasss");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfPhNaturalClass");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhPhonData", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PhonRuleFeatsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("PhonRuleFeatsGuid")
                        .IsUnique();

                    b.ToTable("PhPhonDatas");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhPhonemeSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PhPhonData_PhonemeSetsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("PhPhonData_PhonemeSetsGuid");

                    b.ToTable("PhPhonemeSets");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhSegRuleRHS", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LeftContextGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PhSegmentRule_RightHandSidesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RightContextGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("LeftContextGuid")
                        .IsUnique();

                    b.HasIndex("PhSegmentRule_RightHandSidesGuid");

                    b.HasIndex("RightContextGuid")
                        .IsUnique();

                    b.ToTable("PhSegRuleRHSs");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhSegmentRule", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FinalStratumGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("InitialStratumGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PhPhonData_PhonRulesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("FinalStratumGuid");

                    b.HasIndex("InitialStratumGuid");

                    b.HasIndex("PhPhonData_PhonRulesGuid");

                    b.ToTable("PhSegmentRules");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfPhSegmentRule");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhTerminalUnit", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("PhTerminalUnits");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfPhTerminalUnit");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPicture", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Caption")
                        .HasColumnType("jsonb");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("LayoutPos")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LexSense_PicturesGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("LocationMax")
                        .HasColumnType("integer");

                    b.Property<int>("LocationMin")
                        .HasColumnType("integer");

                    b.Property<int>("LocationRangeType")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PictureFileGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ScaleFactor")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("LexSense_PicturesGuid");

                    b.HasIndex("PictureFileGuid");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPossibility", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Abbreviation")
                        .HasColumnType("jsonb");

                    b.Property<int>("BackColor")
                        .HasColumnType("integer");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ConfidenceGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("DiscussionGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ForeColor")
                        .HasColumnType("integer");

                    b.Property<string>("HelpId")
                        .HasColumnType("text");

                    b.Property<bool>("Hidden")
                        .HasColumnType("boolean");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<bool>("IsProtected")
                        .HasColumnType("boolean");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PossibilityList_PossibilitiesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Possibility_SubPossibilitiesGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("SortSpec")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StatusGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("UnderColor")
                        .HasColumnType("integer");

                    b.Property<int>("UnderStyle")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("ConfidenceGuid");

                    b.HasIndex("DiscussionGuid")
                        .IsUnique();

                    b.HasIndex("PossibilityList_PossibilitiesGuid");

                    b.HasIndex("Possibility_SubPossibilitiesGuid");

                    b.HasIndex("StatusGuid");

                    b.ToTable("Possibilitys");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfPossibility");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPossibilityList", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Abbreviation")
                        .HasColumnType("jsonb");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Depth")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("DisplayOption")
                        .HasColumnType("integer");

                    b.Property<string>("HelpFile")
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSorted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVernacular")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemClsid")
                        .HasColumnType("integer");

                    b.Property<Guid>("ListVersion")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<int>("PreventChoiceAboveLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("PreventDuplicates")
                        .HasColumnType("boolean");

                    b.Property<bool>("PreventNodeChoices")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("Project_CheckListsGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("UseExtendedFields")
                        .HasColumnType("boolean");

                    b.Property<string>("WritingSystem")
                        .HasColumnType("text");

                    b.Property<int>("WsSelector")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("Project_CheckListsGuid");

                    b.ToTable("PossibilityLists");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfProject", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("Projects");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfProject");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPubDivision", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<bool>("DifferentEvenHF")
                        .HasColumnType("boolean");

                    b.Property<bool>("DifferentFirstHF")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("HFSetGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("NumColumns")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PageLayoutGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Publication_DivisionsGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("StartAt")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("HFSetGuid")
                        .IsUnique();

                    b.HasIndex("PageLayoutGuid")
                        .IsUnique();

                    b.HasIndex("Publication_DivisionsGuid");

                    b.ToTable("PubDivisions");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPubHFSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DefaultFooterGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DefaultHeaderGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DsChart_HeaderFooterSetsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EvenFooterGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EvenHeaderGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FirstFooterGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FirstHeaderGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LexDb_HeaderFooterSetsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PossibilityList_HeaderFooterSetsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReversalIndex_HeaderFooterSetsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RnResearchNbk_HeaderFooterSetsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Scripture_HeaderFooterSetsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Text_HeaderFooterSetsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WordformLookupList_HeaderFooterSetsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("DefaultFooterGuid")
                        .IsUnique();

                    b.HasIndex("DefaultHeaderGuid")
                        .IsUnique();

                    b.HasIndex("DsChart_HeaderFooterSetsGuid");

                    b.HasIndex("EvenFooterGuid")
                        .IsUnique();

                    b.HasIndex("EvenHeaderGuid")
                        .IsUnique();

                    b.HasIndex("FirstFooterGuid")
                        .IsUnique();

                    b.HasIndex("FirstHeaderGuid")
                        .IsUnique();

                    b.HasIndex("LexDb_HeaderFooterSetsGuid");

                    b.HasIndex("PossibilityList_HeaderFooterSetsGuid");

                    b.HasIndex("ReversalIndex_HeaderFooterSetsGuid");

                    b.HasIndex("RnResearchNbk_HeaderFooterSetsGuid");

                    b.HasIndex("Scripture_HeaderFooterSetsGuid");

                    b.HasIndex("Text_HeaderFooterSetsGuid");

                    b.HasIndex("WordformLookupList_HeaderFooterSetsGuid");

                    b.ToTable("PubHFSets");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPubHeader", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CenteredText")
                        .HasColumnType("text");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<string>("InsideAlignedText")
                        .HasColumnType("text");

                    b.Property<string>("OutsideAlignedText")
                        .HasColumnType("text");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("PubHeaders");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPubPageLayout", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBuiltIn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<int>("MarginBottom")
                        .HasColumnType("integer");

                    b.Property<int>("MarginInside")
                        .HasColumnType("integer");

                    b.Property<int>("MarginOutside")
                        .HasColumnType("integer");

                    b.Property<int>("MarginTop")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<int>("PosFooter")
                        .HasColumnType("integer");

                    b.Property<int>("PosHeader")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("PubPageLayouts");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPublication", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BaseFontSize")
                        .HasColumnType("integer");

                    b.Property<int>("BaseLineSpacing")
                        .HasColumnType("integer");

                    b.Property<int>("BindingEdge")
                        .HasColumnType("integer");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("DsChart_PublicationsGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("FootnoteSepWidth")
                        .HasColumnType("integer");

                    b.Property<int>("GutterLoc")
                        .HasColumnType("integer");

                    b.Property<int>("GutterMargin")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<bool>("IsLandscape")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LexDb_PublicationsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<int>("PageHeight")
                        .HasColumnType("integer");

                    b.Property<int>("PageWidth")
                        .HasColumnType("integer");

                    b.Property<int>("PaperHeight")
                        .HasColumnType("integer");

                    b.Property<int>("PaperWidth")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PossibilityList_PublicationsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReversalIndex_PublicationsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RnResearchNbk_PublicationsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Scripture_PublicationsGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("SheetLayout")
                        .HasColumnType("integer");

                    b.Property<int>("SheetsPerSig")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Text_PublicationsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WordformLookupList_PublicationsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("DsChart_PublicationsGuid");

                    b.HasIndex("LexDb_PublicationsGuid");

                    b.HasIndex("PossibilityList_PublicationsGuid");

                    b.HasIndex("ReversalIndex_PublicationsGuid");

                    b.HasIndex("RnResearchNbk_PublicationsGuid");

                    b.HasIndex("Scripture_PublicationsGuid");

                    b.HasIndex("Text_PublicationsGuid");

                    b.HasIndex("WordformLookupList_PublicationsGuid");

                    b.ToTable("Publications");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPunctuationForm", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("Form")
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("PunctuationForms");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfReminder", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<GenDate>("Date")
                        .HasColumnType("jsonb");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RnResearchNbk_RemindersGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("RnResearchNbk_RemindersGuid");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfResource", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LexDb_ResourcesGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Scripture_ResourcesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Version")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("LexDb_ResourcesGuid");

                    b.HasIndex("Scripture_ResourcesGuid");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfReversalIndex", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LexDb_ReversalIndexesGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PartsOfSpeechGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("WritingSystem")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("LexDb_ReversalIndexesGuid");

                    b.HasIndex("PartsOfSpeechGuid")
                        .IsUnique();

                    b.ToTable("ReversalIndexs");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfReversalIndexEntry", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PartOfSpeechGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("ReversalForm")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("ReversalIndexEntry_SubentriesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ReversalIndex_EntriesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("PartOfSpeechGuid");

                    b.HasIndex("ReversalIndexEntry_SubentriesGuid");

                    b.HasIndex("ReversalIndex_EntriesGuid");

                    b.ToTable("ReversalIndexEntrys");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfRnGenericRec", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ConclusionsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConfidenceGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<GenDate>("DateOfEvent")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("DescriptionGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DiscussionGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ExternalMaterialsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FurtherQuestionsGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("HypothesisGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("PersonalNotesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResearchPlanGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RnGenericRec_SubRecordsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RnResearchNbk_RecordsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StatusGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TextGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<Guid?>("TypeGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VersionHistoryGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ConclusionsGuid")
                        .IsUnique();

                    b.HasIndex("ConfidenceGuid");

                    b.HasIndex("DescriptionGuid")
                        .IsUnique();

                    b.HasIndex("DiscussionGuid")
                        .IsUnique();

                    b.HasIndex("ExternalMaterialsGuid")
                        .IsUnique();

                    b.HasIndex("FurtherQuestionsGuid")
                        .IsUnique();

                    b.HasIndex("HypothesisGuid")
                        .IsUnique();

                    b.HasIndex("PersonalNotesGuid")
                        .IsUnique();

                    b.HasIndex("ResearchPlanGuid")
                        .IsUnique();

                    b.HasIndex("RnGenericRec_SubRecordsGuid");

                    b.HasIndex("RnResearchNbk_RecordsGuid");

                    b.HasIndex("StatusGuid");

                    b.HasIndex("TextGuid");

                    b.HasIndex("TypeGuid");

                    b.HasIndex("VersionHistoryGuid")
                        .IsUnique();

                    b.ToTable("RnGenericRecs");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfRnResearchNbk", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RecTypesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("RecTypesGuid")
                        .IsUnique();

                    b.ToTable("RnResearchNbks");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfRnRoledPartic", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RnGenericRec_ParticipantsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RoleGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("RnGenericRec_ParticipantsGuid");

                    b.HasIndex("RoleGuid");

                    b.ToTable("RnRoledPartics");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfRow", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Filter_RowsGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("Filter_RowsGuid");

                    b.ToTable("Rows");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrBook", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Abbrev")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("BookIdGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("CanonicalNum")
                        .HasColumnType("integer");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<string>("IdText")
                        .HasColumnType("text");

                    b.Property<List<LfWsTsString>>("ImportedBtCheckSum")
                        .HasColumnType("jsonb");

                    b.Property<string>("ImportedCheckSum")
                        .HasColumnType("text");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ScrDraft_BooksGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Scripture_ScriptureBooksGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TitleGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("UseChapterNumHeading")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.HasIndex("BookIdGuid");

                    b.HasIndex("ScrDraft_BooksGuid");

                    b.HasIndex("Scripture_ScriptureBooksGuid");

                    b.HasIndex("TitleGuid")
                        .IsUnique();

                    b.ToTable("ScrBooks");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrBookAnnotations", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Scripture_BookAnnotationsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("Scripture_BookAnnotationsGuid");

                    b.ToTable("ScrBookAnnotationss");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrBookRef", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("BookAbbrev")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("BookName")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("BookNameAlt")
                        .HasColumnType("jsonb");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ScrRefSystem_BooksGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ScrRefSystem_BooksGuid");

                    b.ToTable("ScrBookRefs");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrCheckRun", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CheckId")
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<int>("Result")
                        .HasColumnType("integer");

                    b.Property<DateTime>("RunDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ScrBookAnnotations_ChkHistRecsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("ScrBookAnnotations_ChkHistRecsGuid");

                    b.ToTable("ScrCheckRuns");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrDifference", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("DiffType")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<int>("RefEnd")
                        .HasColumnType("integer");

                    b.Property<int>("RefStart")
                        .HasColumnType("integer");

                    b.Property<int>("RevLim")
                        .HasColumnType("integer");

                    b.Property<int>("RevMin")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RevParagraphGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScrBook_DiffsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("RevParagraphGuid");

                    b.HasIndex("ScrBook_DiffsGuid");

                    b.ToTable("ScrDifferences");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrDraft", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<bool>("Protected")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("Scripture_ArchivedDraftsGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("Scripture_ArchivedDraftsGuid");

                    b.ToTable("ScrDrafts");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrImportSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<string>("ImportProjToken")
                        .HasColumnType("text");

                    b.Property<int>("ImportType")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Scripture_ImportSettingsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("Scripture_ImportSettingsGuid");

                    b.ToTable("ScrImportSets");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrImportSource", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("NoteTypeGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ScrImportSet_BackTransSourcesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScrImportSet_NoteSourcesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScrImportSet_ScriptureSourcesGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("WritingSystem")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("NoteTypeGuid");

                    b.HasIndex("ScrImportSet_BackTransSourcesGuid");

                    b.HasIndex("ScrImportSet_NoteSourcesGuid");

                    b.HasIndex("ScrImportSet_ScriptureSourcesGuid");

                    b.ToTable("ScrImportSources");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfScrImportSource");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrMarkerMapping", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BeginMarker")
                        .HasColumnType("text");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Domain")
                        .HasColumnType("integer");

                    b.Property<string>("EndMarker")
                        .HasColumnType("text");

                    b.Property<bool>("Excluded")
                        .HasColumnType("boolean");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("NoteTypeGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ScrImportSet_NoteMappingsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScrImportSet_ScriptureMappingsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StyleGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Target")
                        .HasColumnType("integer");

                    b.Property<string>("WritingSystem")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.HasIndex("NoteTypeGuid");

                    b.HasIndex("ScrImportSet_NoteMappingsGuid");

                    b.HasIndex("ScrImportSet_ScriptureMappingsGuid");

                    b.HasIndex("StyleGuid");

                    b.ToTable("ScrMarkerMappings");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrRefSystem", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("ScrRefSystems");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrSection", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ContentGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HeadingGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ScrBook_SectionsGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("VerseRefEnd")
                        .HasColumnType("integer");

                    b.Property<int>("VerseRefMax")
                        .HasColumnType("integer");

                    b.Property<int>("VerseRefMin")
                        .HasColumnType("integer");

                    b.Property<int>("VerseRefStart")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("ContentGuid")
                        .IsUnique();

                    b.HasIndex("HeadingGuid")
                        .IsUnique();

                    b.HasIndex("ScrBook_SectionsGuid");

                    b.ToTable("ScrSections");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScripture", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Bridge")
                        .HasColumnType("text");

                    b.Property<string>("ChapterLabel")
                        .HasColumnType("text");

                    b.Property<string>("ChapterVerseSepr")
                        .HasColumnType("text");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<bool>("ConvertCVDigitsOnExport")
                        .HasColumnType("boolean");

                    b.Property<string>("CrossRefMarkerSymbol")
                        .HasColumnType("text");

                    b.Property<int>("CrossRefMarkerType")
                        .HasColumnType("integer");

                    b.Property<bool>("CrossRefsCombinedWithFootnotes")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<bool>("DisplayCrossRefReference")
                        .HasColumnType("boolean");

                    b.Property<bool>("DisplayFootnoteReference")
                        .HasColumnType("boolean");

                    b.Property<bool>("DisplaySymbolInCrossRef")
                        .HasColumnType("boolean");

                    b.Property<bool>("DisplaySymbolInFootnote")
                        .HasColumnType("boolean");

                    b.Property<string>("FootnoteMarkerSymbol")
                        .HasColumnType("text");

                    b.Property<int>("FootnoteMarkerType")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("NoteCategoriesGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<string>("PsalmLabel")
                        .HasColumnType("text");

                    b.Property<string>("RefSepr")
                        .HasColumnType("text");

                    b.Property<int>("RestartFootnoteBoundary")
                        .HasColumnType("integer");

                    b.Property<bool>("RestartFootnoteSequence")
                        .HasColumnType("boolean");

                    b.Property<int>("ScriptDigitZero")
                        .HasColumnType("integer");

                    b.Property<bool>("UseScriptDigits")
                        .HasColumnType("boolean");

                    b.Property<string>("VersePunct")
                        .HasColumnType("text");

                    b.Property<string>("VerseSepr")
                        .HasColumnType("text");

                    b.Property<int>("Versification")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("NoteCategoriesGuid")
                        .IsUnique();

                    b.ToTable("Scriptures");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfSegment", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BeginOffset")
                        .HasColumnType("integer");

                    b.Property<string>("BeginTimeOffset")
                        .HasColumnType("text");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("EndTimeOffset")
                        .HasColumnType("text");

                    b.Property<List<LfWsTsString>>("FreeTranslation")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("LiteralTranslation")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("MediaURIGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<string>("Reference")
                        .HasColumnType("text");

                    b.Property<Guid?>("SpeakerGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StPara_SegmentsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("MediaURIGuid");

                    b.HasIndex("SpeakerGuid");

                    b.HasIndex("StPara_SegmentsGuid");

                    b.ToTable("Segments");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfStPara", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StText_ParagraphsGuid")
                        .HasColumnType("uuid");

                    b.Property<List<TextProperty>>("StyleRules")
                        .HasColumnType("jsonb");

                    b.HasKey("Guid");

                    b.HasIndex("StText_ParagraphsGuid");

                    b.ToTable("StParas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfStPara");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfStStyle", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BasedOnGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Context")
                        .HasColumnType("integer");

                    b.Property<int>("Function")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<bool>("IsBuiltIn")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsModified")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPublishedTextStyle")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("NextGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Project_StylesGuid")
                        .HasColumnType("uuid");

                    b.Property<List<TextProperty>>("Rules")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("Scripture_StylesGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Structure")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Usage")
                        .HasColumnType("jsonb");

                    b.Property<int>("UserLevel")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("BasedOnGuid");

                    b.HasIndex("NextGuid");

                    b.HasIndex("Project_StylesGuid");

                    b.HasIndex("Scripture_StylesGuid");

                    b.ToTable("StStyles");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfStText", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<bool>("RightToLeft")
                        .HasColumnType("boolean");

                    b.HasKey("Guid");

                    b.ToTable("StTexts");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LfStText");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfText", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Abbreviation")
                        .HasColumnType("jsonb");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ContentsGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<bool>("IsTranslated")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MediaFilesGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Source")
                        .HasColumnType("jsonb");

                    b.HasKey("Guid");

                    b.HasIndex("ContentsGuid")
                        .IsUnique();

                    b.HasIndex("MediaFilesGuid")
                        .IsUnique();

                    b.ToTable("Texts");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfTextTag", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BeginAnalysisIndex")
                        .HasColumnType("integer");

                    b.Property<Guid?>("BeginSegmentGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("EndAnalysisIndex")
                        .HasColumnType("integer");

                    b.Property<Guid?>("EndSegmentGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StText_TagsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TagGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("BeginSegmentGuid");

                    b.HasIndex("EndSegmentGuid");

                    b.HasIndex("StText_TagsGuid");

                    b.HasIndex("TagGuid");

                    b.ToTable("TextTags");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfTranslation", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("LexExampleSentence_TranslationsGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("StPara_TranslationsGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Status")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("Translation")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("TypeGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("LexExampleSentence_TranslationsGuid");

                    b.HasIndex("StPara_TranslationsGuid");

                    b.HasIndex("TypeGuid");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfUserAppFeatAct", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ActivatedLevel")
                        .HasColumnType("integer");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<int>("FeatureId")
                        .HasColumnType("integer");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Project_ActivatedFeaturesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("Project_ActivatedFeaturesGuid");

                    b.ToTable("UserAppFeatActs");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfUserConfigAcct", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<bool>("HasMaintenance")
                        .HasColumnType("boolean");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Project_UserAccountsGuid")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Sid")
                        .HasColumnType("bytea");

                    b.Property<int>("UserLevel")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("Project_UserAccountsGuid");

                    b.ToTable("UserConfigAccts");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfVirtualOrdering", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("Field")
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SourceGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("SourceGuid");

                    b.ToTable("VirtualOrderings");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfWfiAnalysis", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DerivationGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MsFeaturesGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WfiWordform_AnalysesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("CategoryGuid");

                    b.HasIndex("DerivationGuid")
                        .IsUnique();

                    b.HasIndex("MsFeaturesGuid")
                        .IsUnique();

                    b.HasIndex("WfiWordform_AnalysesGuid");

                    b.ToTable("WfiAnalysiss");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfWfiGloss", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Form")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WfiAnalysis_MeaningsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("WfiAnalysis_MeaningsGuid");

                    b.ToTable("WfiGlosss");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfWfiMorphBundle", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Form")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("InflTypeGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MorphGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MsaGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SenseGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WfiAnalysis_MorphBundlesGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("InflTypeGuid");

                    b.HasIndex("MorphGuid");

                    b.HasIndex("MsaGuid");

                    b.HasIndex("SenseGuid");

                    b.HasIndex("WfiAnalysis_MorphBundlesGuid");

                    b.ToTable("WfiMorphBundles");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfWfiWordSet", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MoMorphData_TestSetsGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.HasIndex("MoMorphData_TestSetsGuid");

                    b.ToTable("WfiWordSets");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfWfiWordform", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Checksum")
                        .HasColumnType("integer");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Form")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<int>("SpellingStatus")
                        .HasColumnType("integer");

                    b.HasKey("Guid");

                    b.ToTable("WfiWordforms");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfWordFormLookup", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AnthroCentral")
                        .HasColumnType("integer");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<string>("Form")
                        .HasColumnType("text");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<int>("ThesaurusCentral")
                        .HasColumnType("integer");

                    b.Property<Guid?>("WordformLookupList_WordformsGuid")
                        .HasColumnType("uuid");

                    b.HasKey("Guid");

                    b.HasIndex("WordformLookupList_WordformsGuid");

                    b.ToTable("WordFormLookups");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfWordformLookupList", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClassID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<int>("Hvo")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.Property<int>("OwnOrd")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Owner")
                        .HasColumnType("uuid");

                    b.Property<int>("OwningFlid")
                        .HasColumnType("integer");

                    b.Property<string>("WritingSystem")
                        .HasColumnType("text");

                    b.HasKey("Guid");

                    b.ToTable("WordformLookupLists");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.WritingSystem", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<CharacterSet>>("CharacterSet")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("DefaultFontName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IcuLocale")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IpaType")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAnalysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRightToLeft")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVernacular")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVoice")
                        .HasColumnType("boolean");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LanguageTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("WritingSystems");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.GenDateCustomFieldValue", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.CustomFieldValue");

                    b.Property<string>("RawValue")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Value");

                    b.HasDiscriminator().HasValue("GenDateCustomFieldValue");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.IntCustomFieldValue", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.CustomFieldValue");

                    b.Property<string>("RawValue")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Value");

                    b.HasDiscriminator().HasValue("IntCustomFieldValue");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.PossibilityCustomFieldValue", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.CustomFieldValue");

                    b.Property<Guid>("PossibilityGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("PossibilityGuid_Value");

                    b.HasIndex("PossibilityGuid");

                    b.HasDiscriminator().HasValue("PossibilityCustomFieldValue");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.PossibilityListCustomFieldValue", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.CustomFieldValue");

                    b.HasDiscriminator().HasValue("PossibilityListCustomFieldValue");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.StTextCustomFieldValue", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.CustomFieldValue");

                    b.Property<Guid>("StTextGuid")
                        .HasColumnType("uuid")
                        .HasColumnName("StTextGuid_Value");

                    b.HasIndex("StTextGuid");

                    b.HasDiscriminator().HasValue("StTextCustomFieldValue");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.StringCustomFieldValue", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.CustomFieldValue");

                    b.Property<string>("RawValue")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Value");

                    b.HasDiscriminator().HasValue("StringCustomFieldValue");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.WsTsStringCustomFieldValue", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.CustomFieldValue");

                    b.Property<string>("RawValue")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("jsonb")
                        .HasColumnName("Value");

                    b.HasDiscriminator().HasValue("WsTsStringCustomFieldValue");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfBaseAnnotation", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfAnnotation");

                    b.Property<Guid?>("BeginObjectGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("BeginOffset")
                        .HasColumnType("integer");

                    b.Property<int>("BeginRef")
                        .HasColumnType("integer");

                    b.Property<Guid?>("EndObjectGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("EndOffset")
                        .HasColumnType("integer");

                    b.Property<int>("EndRef")
                        .HasColumnType("integer");

                    b.Property<int>("Flid")
                        .HasColumnType("integer");

                    b.Property<string>("WritingSystem")
                        .HasColumnType("text");

                    b.Property<int>("WsSelector")
                        .HasColumnType("integer");

                    b.HasIndex("BeginObjectGuid");

                    b.HasIndex("EndObjectGuid");

                    b.HasDiscriminator().HasValue("LfBaseAnnotation");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfIndirectAnnotation", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfAnnotation");

                    b.HasDiscriminator().HasValue("LfIndirectAnnotation");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMediaAnnotation", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfAnnotation");

                    b.HasDiscriminator().HasValue("LfMediaAnnotation");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfConstChartClauseMarker", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfConstituentChartCellPart");

                    b.HasDiscriminator().HasValue("LfConstChartClauseMarker");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfConstChartMovedTextMarker", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfConstituentChartCellPart");

                    b.Property<bool>("Preposed")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("WordGroupGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("WordGroupGuid");

                    b.HasDiscriminator().HasValue("LfConstChartMovedTextMarker");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfConstChartTag", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfConstituentChartCellPart");

                    b.Property<Guid?>("TagGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("TagGuid");

                    b.HasDiscriminator().HasValue("LfConstChartTag");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfConstChartWordGroup", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfConstituentChartCellPart");

                    b.Property<int>("BeginAnalysisIndex")
                        .HasColumnType("integer");

                    b.Property<Guid?>("BeginSegmentGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("EndAnalysisIndex")
                        .HasColumnType("integer");

                    b.Property<Guid?>("EndSegmentGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("BeginSegmentGuid");

                    b.HasIndex("EndSegmentGuid");

                    b.HasDiscriminator().HasValue("LfConstChartWordGroup");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfDsConstChart", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfDsChart");

                    b.Property<Guid?>("BasedOnGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("BasedOnGuid");

                    b.HasDiscriminator().HasValue("LfDsConstChart");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsFeatStruc", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfFsAbstractStructure");

                    b.Property<Guid?>("FsAbsStruc_ContentsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MoInflClass_ReferenceFormsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MoStemName_RegionsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Possibility_EmptyParadigmCellsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("Possibility_ReferenceFormsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TypeGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("FsAbsStruc_ContentsGuid");

                    b.HasIndex("MoInflClass_ReferenceFormsGuid");

                    b.HasIndex("MoStemName_RegionsGuid");

                    b.HasIndex("Possibility_EmptyParadigmCellsGuid");

                    b.HasIndex("Possibility_ReferenceFormsGuid");

                    b.HasIndex("TypeGuid");

                    b.HasDiscriminator().HasValue("LfFsFeatStruc");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsFeatStrucDisj", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfFsAbstractStructure");

                    b.Property<Guid?>("FsAbsStruc_FeatureDisjunctionsGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("FsAbsStruc_FeatureDisjunctionsGuid");

                    b.HasDiscriminator().HasValue("LfFsFeatStrucDisj");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsClosedFeature", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfFsFeatDefn");

                    b.HasDiscriminator().HasValue("LfFsClosedFeature");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsComplexFeature", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfFsFeatDefn");

                    b.Property<Guid?>("TypeGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("TypeGuid");

                    b.HasDiscriminator().HasValue("LfFsComplexFeature");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsOpenFeature", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfFsFeatDefn");

                    b.Property<string>("WritingSystem")
                        .HasColumnType("text");

                    b.Property<int>("WsSelector")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("LfFsOpenFeature");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsClosedValue", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfFsFeatureSpecification");

                    b.Property<Guid?>("ValueGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("ValueGuid");

                    b.ToTable("FsFeatureSpecifications", t =>
                        {
                            t.Property("ValueGuid")
                                .HasColumnName("LfFsClosedValue_ValueGuid");
                        });

                    b.HasDiscriminator().HasValue("LfFsClosedValue");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsComplexValue", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfFsFeatureSpecification");

                    b.Property<Guid?>("ValueGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("ValueGuid")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("LfFsComplexValue");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsDisjunctiveValue", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfFsFeatureSpecification");

                    b.HasDiscriminator().HasValue("LfFsDisjunctiveValue");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsNegatedValue", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfFsFeatureSpecification");

                    b.Property<Guid?>("ValueGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("ValueGuid");

                    b.ToTable("FsFeatureSpecifications", t =>
                        {
                            t.Property("ValueGuid")
                                .HasColumnName("LfFsNegatedValue_ValueGuid");
                        });

                    b.HasDiscriminator().HasValue("LfFsNegatedValue");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsOpenValue", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfFsFeatureSpecification");

                    b.Property<List<LfWsTsString>>("Value")
                        .HasColumnType("jsonb");

                    b.HasDiscriminator().HasValue("LfFsOpenValue");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsSharedValue", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfFsFeatureSpecification");

                    b.Property<Guid?>("ValueGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("ValueGuid");

                    b.ToTable("FsFeatureSpecifications", t =>
                        {
                            t.Property("ValueGuid")
                                .HasColumnName("LfFsSharedValue_ValueGuid");
                        });

                    b.HasDiscriminator().HasValue("LfFsSharedValue");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoAdhocProhibGr", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoAdhocProhib");

                    b.Property<List<LfWsTsString>>("Description")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.HasDiscriminator().HasValue("LfMoAdhocProhibGr");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoAlloAdhocProhib", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoAdhocProhib");

                    b.Property<Guid?>("FirstAllomorphGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("FirstAllomorphGuid");

                    b.HasDiscriminator().HasValue("LfMoAlloAdhocProhib");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoMorphAdhocProhib", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoAdhocProhib");

                    b.Property<Guid?>("FirstMorphemeGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("FirstMorphemeGuid");

                    b.HasDiscriminator().HasValue("LfMoMorphAdhocProhib");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoBinaryCompoundRule", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoCompoundRule");

                    b.Property<Guid?>("LeftMsaGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LinkerGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RightMsaGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("LeftMsaGuid")
                        .IsUnique();

                    b.HasIndex("LinkerGuid")
                        .IsUnique();

                    b.HasIndex("RightMsaGuid")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("LfMoBinaryCompoundRule");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoCompoundRuleApp", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoDerivTrace");

                    b.Property<Guid?>("LeftFormGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LinkerGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MoDerivTrace_CompoundRuleAppsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RightFormGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("LeftFormGuid");

                    b.HasIndex("LinkerGuid");

                    b.HasIndex("MoDerivTrace_CompoundRuleAppsGuid");

                    b.HasIndex("RightFormGuid");

                    b.HasDiscriminator().HasValue("LfMoCompoundRuleApp");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoDerivAffApp", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoDerivTrace");

                    b.Property<Guid?>("AffixFormGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AffixMsaGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MoDerivTrace_DerivAffAppGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OutputMsaGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("AffixFormGuid");

                    b.HasIndex("AffixMsaGuid");

                    b.HasIndex("MoDerivTrace_DerivAffAppGuid");

                    b.HasIndex("OutputMsaGuid")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("LfMoDerivAffApp");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInflAffixSlotApp", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoDerivTrace");

                    b.Property<Guid?>("AffixFormGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AffixMsaGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MoDerivTrace_SlotAppsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SlotGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("AffixFormGuid");

                    b.HasIndex("AffixMsaGuid");

                    b.HasIndex("MoDerivTrace_SlotAppsGuid");

                    b.HasIndex("SlotGuid");

                    b.ToTable("MoDerivTraces", t =>
                        {
                            t.Property("AffixFormGuid")
                                .HasColumnName("LfMoInflAffixSlotApp_AffixFormGuid");

                            t.Property("AffixMsaGuid")
                                .HasColumnName("LfMoInflAffixSlotApp_AffixMsaGuid");
                        });

                    b.HasDiscriminator().HasValue("LfMoInflAffixSlotApp");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInflTemplateApp", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoDerivTrace");

                    b.Property<Guid?>("TemplateGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("TemplateGuid");

                    b.HasDiscriminator().HasValue("LfMoInflTemplateApp");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoPhonolRuleApp", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoDerivTrace");

                    b.Property<Guid?>("MoDerivTrace_PRuleAppsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RuleGuid")
                        .HasColumnType("uuid");

                    b.Property<bool>("VacuousApp")
                        .HasColumnType("boolean");

                    b.HasIndex("MoDerivTrace_PRuleAppsGuid");

                    b.HasIndex("RuleGuid");

                    b.HasDiscriminator().HasValue("LfMoPhonolRuleApp");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoStratumApp", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoDerivTrace");

                    b.Property<Guid?>("MoDeriv_StratumAppsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StratumGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TemplateAppGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("MoDeriv_StratumAppsGuid");

                    b.HasIndex("StratumGuid");

                    b.HasIndex("TemplateAppGuid")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("LfMoStratumApp");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoAffixForm", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoForm");

                    b.HasDiscriminator().HasValue("LfMoAffixForm");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoStemAllomorph", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoForm");

                    b.Property<Guid?>("StemNameGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("StemNameGuid");

                    b.HasDiscriminator().HasValue("LfMoStemAllomorph");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoDerivAffMsa", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoMorphSynAnalysis");

                    b.Property<Guid?>("AffixCategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FromInflectionClassGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FromMsFeaturesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FromPartOfSpeechGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FromStemNameGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StratumGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ToInflectionClassGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ToMsFeaturesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ToPartOfSpeechGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("AffixCategoryGuid");

                    b.HasIndex("FromInflectionClassGuid");

                    b.HasIndex("FromMsFeaturesGuid")
                        .IsUnique();

                    b.HasIndex("FromPartOfSpeechGuid");

                    b.HasIndex("FromStemNameGuid");

                    b.HasIndex("StratumGuid");

                    b.HasIndex("ToInflectionClassGuid");

                    b.HasIndex("ToMsFeaturesGuid")
                        .IsUnique();

                    b.HasIndex("ToPartOfSpeechGuid");

                    b.ToTable("MoMorphSynAnalysiss", t =>
                        {
                            t.Property("AffixCategoryGuid")
                                .HasColumnName("LfMoDerivAffMsa_AffixCategoryGuid");
                        });

                    b.HasDiscriminator().HasValue("LfMoDerivAffMsa");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoDerivStepMsa", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoMorphSynAnalysis");

                    b.Property<Guid?>("InflFeatsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InflectionClassGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MsFeaturesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PartOfSpeechGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("InflFeatsGuid")
                        .IsUnique();

                    b.HasIndex("InflectionClassGuid");

                    b.HasIndex("MsFeaturesGuid")
                        .IsUnique();

                    b.HasIndex("PartOfSpeechGuid");

                    b.ToTable("MoMorphSynAnalysiss", t =>
                        {
                            t.Property("InflFeatsGuid")
                                .HasColumnName("LfMoDerivStepMsa_InflFeatsGuid");

                            t.Property("PartOfSpeechGuid")
                                .HasColumnName("LfMoDerivStepMsa_PartOfSpeechGuid");
                        });

                    b.HasDiscriminator().HasValue("LfMoDerivStepMsa");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInflAffMsa", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoMorphSynAnalysis");

                    b.Property<Guid?>("AffixCategoryGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InflFeatsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PartOfSpeechGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("AffixCategoryGuid");

                    b.HasIndex("InflFeatsGuid")
                        .IsUnique();

                    b.HasIndex("PartOfSpeechGuid");

                    b.HasDiscriminator().HasValue("LfMoInflAffMsa");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoStemMsa", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoMorphSynAnalysis");

                    b.Property<Guid?>("InflectionClassGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MsFeaturesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PartOfSpeechGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StratumGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("InflectionClassGuid");

                    b.HasIndex("MsFeaturesGuid")
                        .IsUnique();

                    b.HasIndex("PartOfSpeechGuid");

                    b.HasIndex("StratumGuid");

                    b.ToTable("MoMorphSynAnalysiss", t =>
                        {
                            t.Property("InflectionClassGuid")
                                .HasColumnName("LfMoStemMsa_InflectionClassGuid");

                            t.Property("MsFeaturesGuid")
                                .HasColumnName("LfMoStemMsa_MsFeaturesGuid");

                            t.Property("PartOfSpeechGuid")
                                .HasColumnName("LfMoStemMsa_PartOfSpeechGuid");

                            t.Property("StratumGuid")
                                .HasColumnName("LfMoStemMsa_StratumGuid");
                        });

                    b.HasDiscriminator().HasValue("LfMoStemMsa");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoUnclassifiedAffixMsa", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoMorphSynAnalysis");

                    b.Property<Guid?>("PartOfSpeechGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("PartOfSpeechGuid");

                    b.ToTable("MoMorphSynAnalysiss", t =>
                        {
                            t.Property("PartOfSpeechGuid")
                                .HasColumnName("LfMoUnclassifiedAffixMsa_PartOfSpeechGuid");
                        });

                    b.HasDiscriminator().HasValue("LfMoUnclassifiedAffixMsa");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoCopyFromInput", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoRuleMapping");

                    b.Property<Guid?>("ContentGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("ContentGuid");

                    b.ToTable("MoRuleMappings", t =>
                        {
                            t.Property("ContentGuid")
                                .HasColumnName("LfMoCopyFromInput_ContentGuid");
                        });

                    b.HasDiscriminator().HasValue("LfMoCopyFromInput");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInsertNC", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoRuleMapping");

                    b.Property<Guid?>("ContentGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("ContentGuid");

                    b.ToTable("MoRuleMappings", t =>
                        {
                            t.Property("ContentGuid")
                                .HasColumnName("LfMoInsertNC_ContentGuid");
                        });

                    b.HasDiscriminator().HasValue("LfMoInsertNC");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInsertPhones", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoRuleMapping");

                    b.HasDiscriminator().HasValue("LfMoInsertPhones");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoModifyFromInput", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoRuleMapping");

                    b.Property<Guid?>("ContentGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ModificationGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("ContentGuid");

                    b.HasIndex("ModificationGuid");

                    b.HasDiscriminator().HasValue("LfMoModifyFromInput");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhPhonContext", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPhContextOrVar");

                    b.Property<Guid?>("DescriptionGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("Name")
                        .HasColumnType("jsonb");

                    b.HasIndex("DescriptionGuid")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("LfPhPhonContext");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhVariable", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPhContextOrVar");

                    b.HasDiscriminator().HasValue("LfPhVariable");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhNCFeatures", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPhNaturalClass");

                    b.Property<Guid?>("FeaturesGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("FeaturesGuid")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("LfPhNCFeatures");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhNCSegments", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPhNaturalClass");

                    b.HasDiscriminator().HasValue("LfPhNCSegments");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhMetathesisRule", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPhSegmentRule");

                    b.Property<string>("StrucChange")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("LfPhMetathesisRule");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhRegularRule", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPhSegmentRule");

                    b.HasDiscriminator().HasValue("LfPhRegularRule");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhBdryMarker", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPhTerminalUnit");

                    b.Property<Guid?>("PhPhonemeSet_BoundaryMarkersGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("PhPhonemeSet_BoundaryMarkersGuid");

                    b.HasDiscriminator().HasValue("LfPhBdryMarker");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhPhoneme", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPhTerminalUnit");

                    b.Property<string>("BasicIPASymbol")
                        .HasColumnType("text");

                    b.Property<Guid?>("FeaturesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PhPhonemeSet_PhonemesGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("FeaturesGuid")
                        .IsUnique();

                    b.HasIndex("PhPhonemeSet_PhonemesGuid");

                    b.HasDiscriminator().HasValue("LfPhPhoneme");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfAnnotationDefn", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPossibility");

                    b.Property<bool>("AllowsComment")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowsFeatureStructure")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowsInstanceOf")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanCreateOrphan")
                        .HasColumnType("boolean");

                    b.Property<bool>("CopyCutPastable")
                        .HasColumnType("boolean");

                    b.Property<int>("InstanceOfSignature")
                        .HasColumnType("integer");

                    b.Property<int>("MaxDupOccur")
                        .HasColumnType("integer");

                    b.Property<bool>("Multi")
                        .HasColumnType("boolean");

                    b.Property<bool>("PromptUser")
                        .HasColumnType("boolean");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.Property<bool>("UserCanCreate")
                        .HasColumnType("boolean");

                    b.Property<bool>("ZeroWidth")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("LfAnnotationDefn");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfAnthroItem", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPossibility");

                    b.HasDiscriminator().HasValue("LfAnthroItem");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfChkTerm", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPossibility");

                    b.Property<List<LfWsTsString>>("SeeAlso")
                        .HasColumnType("jsonb");

                    b.Property<int>("TermId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("LfChkTerm");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfCustomItem", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPossibility");

                    b.HasDiscriminator().HasValue("LfCustomItem");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexEntryType", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPossibility");

                    b.Property<List<LfWsTsString>>("ReverseAbbr")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("ReverseName")
                        .HasColumnType("jsonb");

                    b.ToTable("Possibilitys", t =>
                        {
                            t.Property("ReverseName")
                                .HasColumnName("LfLexEntryType_ReverseName");
                        });

                    b.HasDiscriminator().HasValue("LfLexEntryType");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexRefType", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPossibility");

                    b.Property<int>("MappingType")
                        .HasColumnType("integer");

                    b.Property<List<LfWsTsString>>("ReverseAbbreviation")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("ReverseName")
                        .HasColumnType("jsonb");

                    b.HasDiscriminator().HasValue("LfLexRefType");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLocation", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPossibility");

                    b.Property<List<LfWsTsString>>("Alias")
                        .HasColumnType("jsonb");

                    b.ToTable("Possibilitys", t =>
                        {
                            t.Property("Alias")
                                .HasColumnName("LfLocation_Alias");
                        });

                    b.HasDiscriminator().HasValue("LfLocation");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoMorphType", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPossibility");

                    b.Property<string>("Postfix")
                        .HasColumnType("text");

                    b.Property<string>("Prefix")
                        .HasColumnType("text");

                    b.Property<int>("SecondaryOrder")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("LfMoMorphType");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPartOfSpeech", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPossibility");

                    b.Property<string>("CatalogSourceId")
                        .HasColumnType("text");

                    b.Property<Guid?>("DefaultFeaturesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DefaultInflectionClassGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InherFeatValGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("DefaultFeaturesGuid")
                        .IsUnique();

                    b.HasIndex("DefaultInflectionClassGuid");

                    b.HasIndex("InherFeatValGuid")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("LfPartOfSpeech");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPerson", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPossibility");

                    b.Property<List<LfWsTsString>>("Alias")
                        .HasColumnType("jsonb");

                    b.Property<GenDate>("DateOfBirth")
                        .HasColumnType("jsonb");

                    b.Property<GenDate>("DateOfDeath")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("EducationGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<bool>("IsResearcher")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("PlaceOfBirthGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("EducationGuid");

                    b.HasIndex("PlaceOfBirthGuid");

                    b.HasDiscriminator().HasValue("LfPerson");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhPhonRuleFeat", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPossibility");

                    b.Property<Guid?>("ItemGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("ItemGuid");

                    b.HasDiscriminator().HasValue("LfPhPhonRuleFeat");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfSemanticDomain", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPossibility");

                    b.Property<string>("LouwNidaCodes")
                        .HasColumnType("text");

                    b.Property<string>("OcmCodes")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("LfSemanticDomain");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLangProject", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfProject");

                    b.Property<Guid?>("AffixCategoriesGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("AnalysisWss")
                        .HasColumnType("text");

                    b.Property<Guid?>("AnnotationDefsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AnthroListGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConfidenceLevelsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("CurAnalysisWss")
                        .HasColumnType("text");

                    b.Property<string>("CurPronunWss")
                        .HasColumnType("text");

                    b.Property<string>("CurVernWss")
                        .HasColumnType("text");

                    b.Property<Guid?>("DiscourseDataGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EducationGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("EthnologueCode")
                        .HasColumnType("text");

                    b.Property<List<LfWsTsString>>("FieldWorkLocation")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("FilePathsInTsStringsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GenreListGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("HomographWs")
                        .HasColumnType("text");

                    b.Property<Guid?>("LexDbGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("LinkedFilesRootDir")
                        .HasColumnType("text");

                    b.Property<Guid?>("LocationsGuid")
                        .HasColumnType("uuid");

                    b.Property<List<LfWsTsString>>("MainCountry")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("MorphologicalDataGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MsFeatureSystemGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PartsOfSpeechGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PeopleGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PhFeatureSystemGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PhonologicalDataGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PositionsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResearchNotebookGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RestrictionsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RolesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SemanticDomainListGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StatusGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TextMarkupTagsGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ThesaurusGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TimeOfDayGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TranslatedScriptureGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TranslationTagsGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("VernWss")
                        .HasColumnType("text");

                    b.Property<List<LfWsTsString>>("WorldRegion")
                        .HasColumnType("jsonb");

                    b.HasIndex("AffixCategoriesGuid")
                        .IsUnique();

                    b.HasIndex("AnnotationDefsGuid")
                        .IsUnique();

                    b.HasIndex("AnthroListGuid")
                        .IsUnique();

                    b.HasIndex("ConfidenceLevelsGuid")
                        .IsUnique();

                    b.HasIndex("DiscourseDataGuid")
                        .IsUnique();

                    b.HasIndex("EducationGuid")
                        .IsUnique();

                    b.HasIndex("FilePathsInTsStringsGuid")
                        .IsUnique();

                    b.HasIndex("GenreListGuid")
                        .IsUnique();

                    b.HasIndex("LexDbGuid")
                        .IsUnique();

                    b.HasIndex("LocationsGuid")
                        .IsUnique();

                    b.HasIndex("MorphologicalDataGuid")
                        .IsUnique();

                    b.HasIndex("MsFeatureSystemGuid")
                        .IsUnique();

                    b.HasIndex("PartsOfSpeechGuid")
                        .IsUnique();

                    b.HasIndex("PeopleGuid")
                        .IsUnique();

                    b.HasIndex("PhFeatureSystemGuid")
                        .IsUnique();

                    b.HasIndex("PhonologicalDataGuid")
                        .IsUnique();

                    b.HasIndex("PositionsGuid")
                        .IsUnique();

                    b.HasIndex("ResearchNotebookGuid")
                        .IsUnique();

                    b.HasIndex("RestrictionsGuid")
                        .IsUnique();

                    b.HasIndex("RolesGuid")
                        .IsUnique();

                    b.HasIndex("SemanticDomainListGuid")
                        .IsUnique();

                    b.HasIndex("StatusGuid")
                        .IsUnique();

                    b.HasIndex("TextMarkupTagsGuid")
                        .IsUnique();

                    b.HasIndex("ThesaurusGuid");

                    b.HasIndex("TimeOfDayGuid")
                        .IsUnique();

                    b.HasIndex("TranslatedScriptureGuid")
                        .IsUnique();

                    b.HasIndex("TranslationTagsGuid")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("LfLangProject");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrImportP6Project", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfScrImportSource");

                    b.Property<string>("ParatextID")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("LfScrImportP6Project");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrImportSFFiles", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfScrImportSource");

                    b.Property<int>("FileFormat")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("LfScrImportSFFiles");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfStTxtPara", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfStPara");

                    b.Property<string>("Contents")
                        .HasColumnType("text");

                    b.Property<string>("Label")
                        .HasColumnType("text");

                    b.Property<bool>("ParseIsCurrent")
                        .HasColumnType("boolean");

                    b.HasDiscriminator().HasValue("LfStTxtPara");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfStFootnote", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfStText");

                    b.Property<string>("FootnoteMarker")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("LfStFootnote");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfStJournalText", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfStText");

                    b.Property<Guid?>("Annotation_ResponsesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CreatedByGuid")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ModifiedByGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("Annotation_ResponsesGuid");

                    b.HasIndex("CreatedByGuid");

                    b.HasIndex("ModifiedByGuid");

                    b.HasDiscriminator().HasValue("LfStJournalText");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrScriptureNote", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfBaseAnnotation");

                    b.Property<DateTime>("DateResolved")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DiscussionGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("QuoteGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RecommendationGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResolutionGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("ResolutionStatus")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ScrBookAnnotations_NotesGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("DiscussionGuid")
                        .IsUnique();

                    b.HasIndex("QuoteGuid")
                        .IsUnique();

                    b.HasIndex("RecommendationGuid")
                        .IsUnique();

                    b.HasIndex("ResolutionGuid")
                        .IsUnique();

                    b.HasIndex("ScrBookAnnotations_NotesGuid");

                    b.HasDiscriminator().HasValue("LfScrScriptureNote");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoCoordinateCompound", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoBinaryCompoundRule");

                    b.HasDiscriminator().HasValue("LfMoCoordinateCompound");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoEndoCompound", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoBinaryCompoundRule");

                    b.Property<bool>("HeadLast")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("OverridingMsaGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("OverridingMsaGuid")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("LfMoEndoCompound");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoExoCompound", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoBinaryCompoundRule");

                    b.Property<Guid?>("ToMsaGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("ToMsaGuid")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("LfMoExoCompound");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoAffixAllomorph", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoAffixForm");

                    b.Property<Guid?>("MsEnvFeaturesGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("MsEnvPartOfSpeechGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("MsEnvFeaturesGuid")
                        .IsUnique();

                    b.HasIndex("MsEnvPartOfSpeechGuid");

                    b.HasDiscriminator().HasValue("LfMoAffixAllomorph");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoAffixProcess", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfMoAffixForm");

                    b.HasDiscriminator().HasValue("LfMoAffixProcess");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhIterationContext", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPhPhonContext");

                    b.Property<int>("Maximum")
                        .HasColumnType("integer");

                    b.Property<Guid?>("MemberGuid")
                        .HasColumnType("uuid");

                    b.Property<int>("Minimum")
                        .HasColumnType("integer");

                    b.HasIndex("MemberGuid");

                    b.HasDiscriminator().HasValue("LfPhIterationContext");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhSequenceContext", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPhPhonContext");

                    b.HasDiscriminator().HasValue("LfPhSequenceContext");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhSimpleContext", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPhPhonContext");

                    b.Property<Guid?>("PhSegRuleRHS_StrucChangeGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PhSegmentRule_StrucDescGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("PhSegRuleRHS_StrucChangeGuid");

                    b.HasIndex("PhSegmentRule_StrucDescGuid");

                    b.HasDiscriminator().HasValue("LfPhSimpleContext");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexEntryInflType", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfLexEntryType");

                    b.Property<List<LfWsTsString>>("GlossAppend")
                        .HasColumnType("jsonb");

                    b.Property<List<LfWsTsString>>("GlossPrepend")
                        .HasColumnType("jsonb");

                    b.Property<Guid?>("InflFeatsGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("InflFeatsGuid")
                        .IsUnique();

                    b.ToTable("Possibilitys", t =>
                        {
                            t.Property("ReverseName")
                                .HasColumnName("LfLexEntryType_ReverseName");
                        });

                    b.HasDiscriminator().HasValue("LfLexEntryInflType");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrTxtPara", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfStTxtPara");

                    b.HasDiscriminator().HasValue("LfScrTxtPara");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrFootnote", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfStFootnote");

                    b.Property<Guid?>("ParaContainingOrcGuid")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ScrBook_FootnotesGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("ParaContainingOrcGuid");

                    b.HasIndex("ScrBook_FootnotesGuid");

                    b.HasDiscriminator().HasValue("LfScrFootnote");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhSimpleContextBdry", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPhSimpleContext");

                    b.Property<Guid?>("FeatureStructureGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("FeatureStructureGuid");

                    b.HasDiscriminator().HasValue("LfPhSimpleContextBdry");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhSimpleContextNC", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPhSimpleContext");

                    b.Property<Guid?>("FeatureStructureGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("FeatureStructureGuid");

                    b.ToTable("PhContextOrVars", t =>
                        {
                            t.Property("FeatureStructureGuid")
                                .HasColumnName("LfPhSimpleContextNC_FeatureStructureGuid");
                        });

                    b.HasDiscriminator().HasValue("LfPhSimpleContextNC");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhSimpleContextSeg", b =>
                {
                    b.HasBaseType("SIL.LCModel.EFCore.Model.LfPhSimpleContext");

                    b.Property<Guid?>("FeatureStructureGuid")
                        .HasColumnType("uuid");

                    b.HasIndex("FeatureStructureGuid");

                    b.ToTable("PhContextOrVars", t =>
                        {
                            t.Property("FeatureStructureGuid")
                                .HasColumnName("LfPhSimpleContextSeg_FeatureStructureGuid");
                        });

                    b.HasDiscriminator().HasValue("LfPhSimpleContextSeg");
                });

            modelBuilder.Entity("LfAgentEvaluationLfWfiAnalysis", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfAgentEvaluation", null)
                        .WithMany()
                        .HasForeignKey("EvaluationsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfWfiAnalysis", null)
                        .WithMany()
                        .HasForeignKey("LfWfiAnalysisGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfAgentLfMoMorphData", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfAgent", null)
                        .WithMany()
                        .HasForeignKey("AnalyzingAgentsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphData", null)
                        .WithMany()
                        .HasForeignKey("LfMoMorphDataGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfAnalysisLfSegment", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfAnalysis", null)
                        .WithMany()
                        .HasForeignKey("AnalysesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfSegment", null)
                        .WithMany()
                        .HasForeignKey("LfSegmentGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfAnnotationLfIndirectAnnotation", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfAnnotation", null)
                        .WithMany()
                        .HasForeignKey("AppliesToGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfIndirectAnnotation", null)
                        .WithMany()
                        .HasForeignKey("LfIndirectAnnotationGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfAnthroItemLfLexSense", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfAnthroItem", null)
                        .WithMany()
                        .HasForeignKey("AnthroCodesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", null)
                        .WithMany()
                        .HasForeignKey("LfLexSenseGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfAnthroItemLfRnGenericRec", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfAnthroItem", null)
                        .WithMany()
                        .HasForeignKey("AnthroCodesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("LfRnGenericRecGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfAnthroItemLfSemanticDomain", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfSemanticDomain", null)
                        .WithMany()
                        .HasForeignKey("LfSemanticDomainGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfAnthroItem", null)
                        .WithMany()
                        .HasForeignKey("OcmRefsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfAnthroItemLfWordFormLookup", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfAnthroItem", null)
                        .WithMany()
                        .HasForeignKey("AnthroCodesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfWordFormLookup", null)
                        .WithMany()
                        .HasForeignKey("LfWordFormLookup1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfBaseAnnotationLfObjectId", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfBaseAnnotation", null)
                        .WithMany()
                        .HasForeignKey("LfBaseAnnotationGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfObjectId", null)
                        .WithMany()
                        .HasForeignKey("OtherObjectsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfConstChartClauseMarkerLfConstChartRow", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfConstChartRow", null)
                        .WithMany()
                        .HasForeignKey("DependentClausesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfConstChartClauseMarker", null)
                        .WithMany()
                        .HasForeignKey("LfConstChartClauseMarkerGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConstChartClauseMarker_DependentClauses_ConstChartRow_Cons~1");
                });

            modelBuilder.Entity("LfCrossReferenceLfRnGenericRec", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfCrossReference", null)
                        .WithMany()
                        .HasForeignKey("CrossReferencesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("LfRnGenericRecGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfFsDisjunctiveValueLfFsSymFeatVal", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsDisjunctiveValue", null)
                        .WithMany()
                        .HasForeignKey("LfFsDisjunctiveValueGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsSymFeatVal", null)
                        .WithMany()
                        .HasForeignKey("ValueGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfFsFeatDefnLfFsFeatStrucType", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatDefn", null)
                        .WithMany()
                        .HasForeignKey("FeaturesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStrucType", null)
                        .WithMany()
                        .HasForeignKey("LfFsFeatStrucTypeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfFsFeatDefnLfPartOfSpeech", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatDefn", null)
                        .WithMany()
                        .HasForeignKey("BearableFeaturesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", null)
                        .WithMany()
                        .HasForeignKey("LfPartOfSpeechGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfFsFeatDefnLfPartOfSpeech1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatDefn", null)
                        .WithMany()
                        .HasForeignKey("InflectableFeatsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", null)
                        .WithMany()
                        .HasForeignKey("LfPartOfSpeech1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLangProjectLfWordformLookupList", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLangProject", null)
                        .WithMany()
                        .HasForeignKey("LfLangProjectGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfWordformLookupList", null)
                        .WithMany()
                        .HasForeignKey("WordformLookupListsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexAppendixLfLexSense", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexAppendix", null)
                        .WithMany()
                        .HasForeignKey("AppendixesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", null)
                        .WithMany()
                        .HasForeignKey("LfLexSenseGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexDbLfLexEntry", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntry", null)
                        .WithMany()
                        .HasForeignKey("LexicalFormIndexGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexDb", null)
                        .WithMany()
                        .HasForeignKey("LfLexDbGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexDbLfMoForm", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoForm", null)
                        .WithMany()
                        .HasForeignKey("AllomorphIndexGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexDb", null)
                        .WithMany()
                        .HasForeignKey("LfLexDbGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexEntryInflTypeLfMoInflAffixSlot", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntryInflType", null)
                        .WithMany()
                        .HasForeignKey("LfLexEntryInflTypeGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixSlot", null)
                        .WithMany()
                        .HasForeignKey("SlotsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexEntryLfObjectId", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntry", null)
                        .WithMany()
                        .HasForeignKey("LfLexEntryGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfObjectId", null)
                        .WithMany()
                        .HasForeignKey("MainEntriesOrSensesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexEntryLfPossibility", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("DoNotShowMainEntryInGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntry", null)
                        .WithMany()
                        .HasForeignKey("LfLexEntryGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexEntryLfPossibility1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("DoNotPublishInGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntry", null)
                        .WithMany()
                        .HasForeignKey("LfLexEntry1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexEntryLfPossibility2", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("DialectLabelsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntry", null)
                        .WithMany()
                        .HasForeignKey("LfLexEntry2Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexEntryLfWfiAnalysis", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfWfiAnalysis", null)
                        .WithMany()
                        .HasForeignKey("LfWfiAnalysisGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntry", null)
                        .WithMany()
                        .HasForeignKey("StemsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexEntryRefLfLexEntryType", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntryRef", null)
                        .WithMany()
                        .HasForeignKey("LfLexEntryRefGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntryType", null)
                        .WithMany()
                        .HasForeignKey("VariantEntryTypesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexEntryRefLfLexEntryType1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntryType", null)
                        .WithMany()
                        .HasForeignKey("ComplexEntryTypesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntryRef", null)
                        .WithMany()
                        .HasForeignKey("LfLexEntryRef1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexEntryRefLfObjectId", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntryRef", null)
                        .WithMany()
                        .HasForeignKey("LfLexEntryRefGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfObjectId", null)
                        .WithMany()
                        .HasForeignKey("PrimaryLexemesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexEntryRefLfObjectId1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfObjectId", null)
                        .WithMany()
                        .HasForeignKey("ComponentLexemesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntryRef", null)
                        .WithMany()
                        .HasForeignKey("LfLexEntryRef1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexEntryRefLfObjectId2", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntryRef", null)
                        .WithMany()
                        .HasForeignKey("LfLexEntryRef2Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfObjectId", null)
                        .WithMany()
                        .HasForeignKey("ShowComplexFormsInGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexEtymologyLfPossibility", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("LanguageGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEtymology", null)
                        .WithMany()
                        .HasForeignKey("LfLexEtymologyGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexExampleSentenceLfPossibility", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("DoNotPublishInGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexExampleSentence", null)
                        .WithMany()
                        .HasForeignKey("LfLexExampleSentenceGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexPronunciationLfPossibility", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("DoNotPublishInGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexPronunciation", null)
                        .WithMany()
                        .HasForeignKey("LfLexPronunciationGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexReferenceLfObjectId", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexReference", null)
                        .WithMany()
                        .HasForeignKey("LfLexReferenceGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfObjectId", null)
                        .WithMany()
                        .HasForeignKey("TargetsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexSenseLfPossibility", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("DomainTypesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", null)
                        .WithMany()
                        .HasForeignKey("LfLexSense1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexSenseLfPossibility1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", null)
                        .WithMany()
                        .HasForeignKey("LfLexSense2Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("ThesaurusItemsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexSenseLfPossibility2", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", null)
                        .WithMany()
                        .HasForeignKey("LfLexSense3Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("UsageTypesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexSenseLfPossibility3", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("DoNotPublishInGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", null)
                        .WithMany()
                        .HasForeignKey("LfLexSense4Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexSenseLfPossibility4", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("DialectLabelsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", null)
                        .WithMany()
                        .HasForeignKey("LfLexSense5Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexSenseLfReversalIndexEntry", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfReversalIndexEntry", null)
                        .WithMany()
                        .HasForeignKey("LfReversalIndexEntryGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", null)
                        .WithMany()
                        .HasForeignKey("SensesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLexSenseLfSemanticDomain", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", null)
                        .WithMany()
                        .HasForeignKey("LfLexSenseGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfSemanticDomain", null)
                        .WithMany()
                        .HasForeignKey("SemanticDomainsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLocationLfPerson", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPerson", null)
                        .WithMany()
                        .HasForeignKey("LfPersonGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLocation", null)
                        .WithMany()
                        .HasForeignKey("PlacesOfResidenceGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfLocationLfRnGenericRec", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("LfRnGenericRecGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLocation", null)
                        .WithMany()
                        .HasForeignKey("LocationsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoAffixAllomorphLfPhEnvironment", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoAffixAllomorph", null)
                        .WithMany()
                        .HasForeignKey("LfMoAffixAllomorphGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhEnvironment", null)
                        .WithMany()
                        .HasForeignKey("PhoneEnvGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoAffixAllomorphLfPhEnvironment1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoAffixAllomorph", null)
                        .WithMany()
                        .HasForeignKey("LfMoAffixAllomorph1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhEnvironment", null)
                        .WithMany()
                        .HasForeignKey("PositionGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoAffixFormLfMoInflClass", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflClass", null)
                        .WithMany()
                        .HasForeignKey("InflectionClassesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoAffixForm", null)
                        .WithMany()
                        .HasForeignKey("LfMoAffixFormGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoAlloAdhocProhibLfMoForm", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoForm", null)
                        .WithMany()
                        .HasForeignKey("AllomorphsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoAlloAdhocProhib", null)
                        .WithMany()
                        .HasForeignKey("LfMoAlloAdhocProhibGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoAlloAdhocProhibLfMoForm1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoAlloAdhocProhib", null)
                        .WithMany()
                        .HasForeignKey("LfMoAlloAdhocProhib1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoForm", null)
                        .WithMany()
                        .HasForeignKey("RestOfAllosGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoCompoundRuleLfPossibility", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoCompoundRule", null)
                        .WithMany()
                        .HasForeignKey("LfMoCompoundRuleGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("ToProdRestrictGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoCompoundRuleLfWfiAnalysis", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoCompoundRule", null)
                        .WithMany()
                        .HasForeignKey("CompoundRuleAppsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfWfiAnalysis", null)
                        .WithMany()
                        .HasForeignKey("LfWfiAnalysisGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoDerivAffMsaLfPossibility", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("FromProdRestrictGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoDerivAffMsa", null)
                        .WithMany()
                        .HasForeignKey("LfMoDerivAffMsaGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoDerivAffMsaLfPossibility1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoDerivAffMsa", null)
                        .WithMany()
                        .HasForeignKey("LfMoDerivAffMsa1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("ToProdRestrictGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoDerivStepMsaLfPossibility", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoDerivStepMsa", null)
                        .WithMany()
                        .HasForeignKey("LfMoDerivStepMsaGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("ProdRestrictGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoGlossItemLfMoMorphSynAnalysis", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoGlossItem", null)
                        .WithMany()
                        .HasForeignKey("GlossBundleGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphSynAnalysis", null)
                        .WithMany()
                        .HasForeignKey("LfMoMorphSynAnalysisGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoInflAffMsaLfMoInflAffixSlot", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffMsa", null)
                        .WithMany()
                        .HasForeignKey("LfMoInflAffMsaGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixSlot", null)
                        .WithMany()
                        .HasForeignKey("SlotsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoInflAffMsaLfPossibility", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("FromProdRestrictGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffMsa", null)
                        .WithMany()
                        .HasForeignKey("LfMoInflAffMsaGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoInflAffixSlotLfMoInflAffixTemplate", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixTemplate", null)
                        .WithMany()
                        .HasForeignKey("LfMoInflAffixTemplateGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixSlot", null)
                        .WithMany()
                        .HasForeignKey("SlotsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoInflAffixSlotLfMoInflAffixTemplate1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixTemplate", null)
                        .WithMany()
                        .HasForeignKey("LfMoInflAffixTemplate1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixSlot", null)
                        .WithMany()
                        .HasForeignKey("PrefixSlotsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MoInflAffixTemplate_PrefixSlots_MoInflAffixSlot_MoInflAffi~1");
                });

            modelBuilder.Entity("LfMoInflAffixSlotLfMoInflAffixTemplate2", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixTemplate", null)
                        .WithMany()
                        .HasForeignKey("LfMoInflAffixTemplate2Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixSlot", null)
                        .WithMany()
                        .HasForeignKey("SuffixSlotsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MoInflAffixTemplate_SuffixSlots_MoInflAffixSlot_MoInflAffi~1");
                });

            modelBuilder.Entity("LfMoInflAffixSlotLfMoInflAffixTemplate3", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixTemplate", null)
                        .WithMany()
                        .HasForeignKey("LfMoInflAffixTemplate3Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixSlot", null)
                        .WithMany()
                        .HasForeignKey("ProcliticSlotsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MoInflAffixTemplate_ProcliticSlots_MoInflAffixSlot_MoInflA~1");
                });

            modelBuilder.Entity("LfMoInflAffixSlotLfMoInflAffixTemplate4", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixSlot", null)
                        .WithMany()
                        .HasForeignKey("EncliticSlotsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixTemplate", null)
                        .WithMany()
                        .HasForeignKey("LfMoInflAffixTemplate4Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MoInflAffixTemplate_EncliticSlots_MoInflAffixSlot_MoInflAf~1");
                });

            modelBuilder.Entity("LfMoInflAffixSlotLfMoStemMsa", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemMsa", null)
                        .WithMany()
                        .HasForeignKey("LfMoStemMsaGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixSlot", null)
                        .WithMany()
                        .HasForeignKey("SlotsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoInflAffixTemplateLfWfiAnalysis", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixTemplate", null)
                        .WithMany()
                        .HasForeignKey("InflTemplateAppsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfWfiAnalysis", null)
                        .WithMany()
                        .HasForeignKey("LfWfiAnalysisGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoInsertPhonesLfPhTerminalUnit", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhTerminalUnit", null)
                        .WithMany()
                        .HasForeignKey("ContentGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInsertPhones", null)
                        .WithMany()
                        .HasForeignKey("LfMoInsertPhonesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoMorphAdhocProhibLfMoMorphSynAnalysis", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphAdhocProhib", null)
                        .WithMany()
                        .HasForeignKey("LfMoMorphAdhocProhibGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphSynAnalysis", null)
                        .WithMany()
                        .HasForeignKey("MorphemesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoMorphAdhocProhibLfMoMorphSynAnalysis1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphAdhocProhib", null)
                        .WithMany()
                        .HasForeignKey("LfMoMorphAdhocProhib1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphSynAnalysis", null)
                        .WithMany()
                        .HasForeignKey("RestOfMorphsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoMorphSynAnalysisLfMoMorphSynAnalysis", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphSynAnalysis", null)
                        .WithMany()
                        .HasForeignKey("ComponentsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphSynAnalysis", null)
                        .WithMany()
                        .HasForeignKey("LfMoMorphSynAnalysisGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MoMorphSynAnalysis_Components_MoMorphSynAnalysis_MoMorphSy~1");
                });

            modelBuilder.Entity("LfMoStemAllomorphLfPhEnvironment", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemAllomorph", null)
                        .WithMany()
                        .HasForeignKey("LfMoStemAllomorphGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhEnvironment", null)
                        .WithMany()
                        .HasForeignKey("PhoneEnvGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoStemMsaLfPartOfSpeech", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", null)
                        .WithMany()
                        .HasForeignKey("FromPartsOfSpeechGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemMsa", null)
                        .WithMany()
                        .HasForeignKey("LfMoStemMsa1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfMoStemMsaLfPossibility", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemMsa", null)
                        .WithMany()
                        .HasForeignKey("LfMoStemMsaGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("ProdRestrictGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfObjectIdLfStTxtPara", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfStTxtPara", null)
                        .WithMany()
                        .HasForeignKey("LfStTxtParaGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfObjectId", null)
                        .WithMany()
                        .HasForeignKey("TextObjectsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfObjectIdLfVirtualOrdering", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfObjectId", null)
                        .WithMany()
                        .HasForeignKey("ItemsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfVirtualOrdering", null)
                        .WithMany()
                        .HasForeignKey("LfVirtualOrderingGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfOverlayLfPossibility", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfOverlay", null)
                        .WithMany()
                        .HasForeignKey("LfOverlayGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("PossItemsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPartOfSpeechLfPhSegRuleRHS", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", null)
                        .WithMany()
                        .HasForeignKey("InputPOSesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhSegRuleRHS", null)
                        .WithMany()
                        .HasForeignKey("LfPhSegRuleRHSGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPersonLfPossibility", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("LfPossibility1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPerson", null)
                        .WithMany()
                        .HasForeignKey("ResearchersGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPersonLfPossibility1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPerson", null)
                        .WithMany()
                        .HasForeignKey("LfPerson1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("PositionsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPersonLfRnGenericRec", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("LfRnGenericRecGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPerson", null)
                        .WithMany()
                        .HasForeignKey("ResearchersGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPersonLfRnGenericRec1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("LfRnGenericRec3Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPerson", null)
                        .WithMany()
                        .HasForeignKey("SourcesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPersonLfRnRoledPartic", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnRoledPartic", null)
                        .WithMany()
                        .HasForeignKey("LfRnRoledParticGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPerson", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPhFeatureConstraintLfPhSimpleContextNC", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhSimpleContextNC", null)
                        .WithMany()
                        .HasForeignKey("LfPhSimpleContextNCGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhFeatureConstraint", null)
                        .WithMany()
                        .HasForeignKey("PlusConstrGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPhFeatureConstraintLfPhSimpleContextNC1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhSimpleContextNC", null)
                        .WithMany()
                        .HasForeignKey("LfPhSimpleContextNC1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhFeatureConstraint", null)
                        .WithMany()
                        .HasForeignKey("MinusConstrGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPhNCSegmentsLfPhPhoneme", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhNCSegments", null)
                        .WithMany()
                        .HasForeignKey("LfPhNCSegmentsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhoneme", null)
                        .WithMany()
                        .HasForeignKey("SegmentsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPhPhonContextLfPhSequenceContext", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhSequenceContext", null)
                        .WithMany()
                        .HasForeignKey("LfPhSequenceContextGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonContext", null)
                        .WithMany()
                        .HasForeignKey("MembersGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPhPhonRuleFeatLfPhSegRuleRHS", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonRuleFeat", null)
                        .WithMany()
                        .HasForeignKey("ExclRuleFeatsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhSegRuleRHS", null)
                        .WithMany()
                        .HasForeignKey("LfPhSegRuleRHSGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPhPhonRuleFeatLfPhSegRuleRHS1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhSegRuleRHS", null)
                        .WithMany()
                        .HasForeignKey("LfPhSegRuleRHS1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonRuleFeat", null)
                        .WithMany()
                        .HasForeignKey("ReqRuleFeatsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPictureLfPossibility", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("DoNotPublishInGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPicture", null)
                        .WithMany()
                        .HasForeignKey("LfPictureGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPossibilityLfPossibility", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("LfPossibilityGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("RestrictionsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPossibilityLfRnGenericRec", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("LfRnGenericRec1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("RestrictionsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPossibilityLfRnGenericRec1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("LfRnGenericRec2Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("PhraseTagsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPossibilityLfRnGenericRec2", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("LfRnGenericRec4Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("TimeOfEventGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPossibilityLfScrScriptureNote", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("CategoriesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrScriptureNote", null)
                        .WithMany()
                        .HasForeignKey("LfScrScriptureNoteGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPossibilityLfText", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("GenresGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfText", null)
                        .WithMany()
                        .HasForeignKey("LfTextGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPossibilityLfWordFormLookup", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfWordFormLookup", null)
                        .WithMany()
                        .HasForeignKey("LfWordFormLookupGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("ThesaurusItemsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfPossibilityPossibilityListCustomFieldValue", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.PossibilityListCustomFieldValue", null)
                        .WithMany()
                        .HasForeignKey("PossibilityListCustomFieldValueGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany()
                        .HasForeignKey("ValueGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfReminderLfRnGenericRec", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("LfRnGenericRecGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfReminder", null)
                        .WithMany()
                        .HasForeignKey("RemindersGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfRnGenericRecLfRnGenericRec", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("LfRnGenericRecGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("SeeAlsoGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfRnGenericRecLfRnGenericRec1", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("CounterEvidenceGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("LfRnGenericRec1Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfRnGenericRecLfRnGenericRec2", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("LfRnGenericRec2Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("SupersededByGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfRnGenericRecLfRnGenericRec3", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("LfRnGenericRec3Guid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany()
                        .HasForeignKey("SupportingEvidenceGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RnGenericRec_SupportingEvidence_RnGenericRec_RnGenericRecs~1");
                });

            modelBuilder.Entity("LfSemanticDomainLfSemanticDomain", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfSemanticDomain", null)
                        .WithMany()
                        .HasForeignKey("LfSemanticDomainGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfSemanticDomain", null)
                        .WithMany()
                        .HasForeignKey("RelatedDomainsGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfUserAppFeatActLfUserConfigAcct", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfUserAppFeatAct", null)
                        .WithMany()
                        .HasForeignKey("LfUserAppFeatActGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfUserConfigAcct", null)
                        .WithMany()
                        .HasForeignKey("UserConfigAcctGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LfWfiWordSetLfWfiWordform", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfWfiWordform", null)
                        .WithMany()
                        .HasForeignKey("CasesGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfWfiWordSet", null)
                        .WithMany()
                        .HasForeignKey("LfWfiWordSetGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.CustomFieldValue", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.CustomFieldConfig", "Config")
                        .WithMany()
                        .HasForeignKey("ConfigId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntry", null)
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("LfLexEntryGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexExampleSentence", null)
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("LfLexExampleSentenceGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", null)
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("LfLexSenseGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoForm", null)
                        .WithMany("CustomFieldValues")
                        .HasForeignKey("LfMoFormGuid");

                    b.Navigation("Config");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfAgent", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfAgentEvaluation", "Approves")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfAgent", "ApprovesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfAgentEvaluation", "Disapproves")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfAgent", "DisapprovesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "Notes")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfAgent", "NotesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLangProject", null)
                        .WithMany("AnalyzingAgents")
                        .HasForeignKey("Project_AnalyzingAgentsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Approves");

                    b.Navigation("Disapproves");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfAnalysis", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfWfiAnalysis", "Analysis")
                        .WithMany()
                        .HasForeignKey("AnalysisGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfWfiWordform", "Wordform")
                        .WithMany()
                        .HasForeignKey("WordformGuid");

                    b.Navigation("Analysis");

                    b.Navigation("Wordform");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfAnnotation", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfAnnotationDefn", "AnnotationType")
                        .WithMany()
                        .HasForeignKey("AnnotationTypeGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "Features")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfAnnotation", "FeaturesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfObjectId", "InstanceOf")
                        .WithMany()
                        .HasForeignKey("InstanceOfGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLangProject", null)
                        .WithMany("Annotations")
                        .HasForeignKey("Project_AnnotationsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfAgent", "Source")
                        .WithMany()
                        .HasForeignKey("SourceGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "Text")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfAnnotation", "TextGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AnnotationType");

                    b.Navigation("Features");

                    b.Navigation("InstanceOf");

                    b.Navigation("Source");

                    b.Navigation("Text");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfCell", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRow", null)
                        .WithMany("Cells")
                        .HasForeignKey("Row_CellsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfChkRef", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfChkTerm", null)
                        .WithMany("Occurrences")
                        .HasForeignKey("Possibility_OccurrencesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfWfiWordform", "Rendering")
                        .WithMany()
                        .HasForeignKey("RenderingGuid");

                    b.Navigation("Rendering");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfChkRendering", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfWfiGloss", "Meaning")
                        .WithMany()
                        .HasForeignKey("MeaningGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfChkTerm", null)
                        .WithMany("Renderings")
                        .HasForeignKey("Possibility_RenderingsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfWfiWordform", "SurfaceForm")
                        .WithMany()
                        .HasForeignKey("SurfaceFormGuid");

                    b.Navigation("Meaning");

                    b.Navigation("SurfaceForm");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfChkSense", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", "Sense")
                        .WithMany()
                        .HasForeignKey("SenseGuid");

                    b.Navigation("Sense");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfConstChartRow", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfDsConstChart", null)
                        .WithMany("Rows")
                        .HasForeignKey("DsChart_RowsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfConstituentChartCellPart", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "Column")
                        .WithMany()
                        .HasForeignKey("ColumnGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfConstChartRow", null)
                        .WithMany("Cells")
                        .HasForeignKey("ConstChartRow_CellsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Column");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfCrossReference", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnResearchNbk", null)
                        .WithMany("CrossReferences")
                        .HasForeignKey("RnResearchNbk_CrossReferencesGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfDomainQ", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfSemanticDomain", null)
                        .WithMany("Questions")
                        .HasForeignKey("Possibility_QuestionsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfDsChart", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfDsDiscourseData", null)
                        .WithMany("Charts")
                        .HasForeignKey("DsDiscourseData_ChartsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateGuid");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfDsDiscourseData", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "ChartMarkers")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfDsDiscourseData", "ChartMarkersGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "ConstChartTempl")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfDsDiscourseData", "ConstChartTemplGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ChartMarkers");

                    b.Navigation("ConstChartTempl");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFile", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFolder", null)
                        .WithMany("Files")
                        .HasForeignKey("Folder_FilesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrImportSFFiles", null)
                        .WithMany("Files")
                        .HasForeignKey("ScrImportSource_FilesGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFilter", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLangProject", null)
                        .WithMany("Filters")
                        .HasForeignKey("Project_FiltersGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFolder", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFolder", null)
                        .WithMany("SubFolders")
                        .HasForeignKey("Folder_SubFoldersGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLangProject", null)
                        .WithMany("Media")
                        .HasForeignKey("Project_MediaGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLangProject", null)
                        .WithMany("Pictures")
                        .HasForeignKey("Project_PicturesGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsFeatDefn", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatureSpecification", "Default")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfFsFeatDefn", "DefaultGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatureSystem", null)
                        .WithMany("Features")
                        .HasForeignKey("FsFeatureSystem_FeaturesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Default");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsFeatStrucType", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatureSystem", null)
                        .WithMany("Types")
                        .HasForeignKey("FsFeatureSystem_TypesGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsFeatureSpecification", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatDefn", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", null)
                        .WithMany("FeatureSpecs")
                        .HasForeignKey("FsAbsStruc_FeatureSpecsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsSymFeatVal", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsClosedFeature", null)
                        .WithMany("Values")
                        .HasForeignKey("FsFeatDefn_ValuesGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexAppendix", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "Contents")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLexAppendix", "ContentsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexDb", null)
                        .WithMany("Appendixes")
                        .HasForeignKey("LexDb_AppendixesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Contents");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexDb", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "ComplexEntryTypes")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLexDb", "ComplexEntryTypesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "DialectLabels")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLexDb", "DialectLabelsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "DomainTypes")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLexDb", "DomainTypesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "ExtendedNoteTypes")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLexDb", "ExtendedNoteTypesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "Introduction")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLexDb", "IntroductionGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "Languages")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLexDb", "LanguagesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "MorphTypes")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLexDb", "MorphTypesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "PublicationTypes")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLexDb", "PublicationTypesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "References")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLexDb", "ReferencesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "SenseTypes")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLexDb", "SenseTypesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "UsageTypes")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLexDb", "UsageTypesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "VariantEntryTypes")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLexDb", "VariantEntryTypesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ComplexEntryTypes");

                    b.Navigation("DialectLabels");

                    b.Navigation("DomainTypes");

                    b.Navigation("ExtendedNoteTypes");

                    b.Navigation("Introduction");

                    b.Navigation("Languages");

                    b.Navigation("MorphTypes");

                    b.Navigation("PublicationTypes");

                    b.Navigation("References");

                    b.Navigation("SenseTypes");

                    b.Navigation("UsageTypes");

                    b.Navigation("VariantEntryTypes");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexEntry", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoForm", "LexemeForm")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLexEntry", "LexemeFormGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LexemeForm");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexEntryRef", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntry", null)
                        .WithMany("EntryRefs")
                        .HasForeignKey("LexEntry_EntryRefsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexEtymology", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntry", null)
                        .WithMany("Etymology")
                        .HasForeignKey("LexEntry_EtymologyGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexExampleSentence", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexExtendedNote", null)
                        .WithMany("Examples")
                        .HasForeignKey("LexExtendedNote_ExamplesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", null)
                        .WithMany("Examples")
                        .HasForeignKey("LexSense_ExamplesGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexExtendedNote", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "ExtendedNoteType")
                        .WithMany()
                        .HasForeignKey("ExtendedNoteTypeGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", null)
                        .WithMany("ExtendedNote")
                        .HasForeignKey("LexSense_ExtendedNoteGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ExtendedNoteType");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexPronunciation", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntry", null)
                        .WithMany("Pronunciations")
                        .HasForeignKey("LexEntry_PronunciationsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationGuid");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexReference", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexRefType", null)
                        .WithMany("Members")
                        .HasForeignKey("Possibility_MembersGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexSense", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntry", null)
                        .WithMany("Senses")
                        .HasForeignKey("LexEntry_SensesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", null)
                        .WithMany("Senses")
                        .HasForeignKey("LexSense_SensesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphSynAnalysis", "MorphoSyntaxAnalysis")
                        .WithMany()
                        .HasForeignKey("MorphoSyntaxAnalysisGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "SenseType")
                        .WithMany()
                        .HasForeignKey("SenseTypeGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "Status")
                        .WithMany()
                        .HasForeignKey("StatusGuid");

                    b.Navigation("MorphoSyntaxAnalysis");

                    b.Navigation("SenseType");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMedia", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexPronunciation", null)
                        .WithMany("MediaFiles")
                        .HasForeignKey("LexPronunciation_MediaFilesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFile", "MediaFile")
                        .WithMany()
                        .HasForeignKey("MediaFileGuid");

                    b.Navigation("MediaFile");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMediaURI", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMediaContainer", null)
                        .WithMany("MediaURIs")
                        .HasForeignKey("MediaContainer_MediaURIsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoAdhocProhib", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoAdhocProhibGr", null)
                        .WithMany("Members")
                        .HasForeignKey("MoAdhocProhib_MembersGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphData", null)
                        .WithMany("AdhocCoProhibitions")
                        .HasForeignKey("MoMorphData_AdhocCoProhibitionsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoCompoundRule", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphData", null)
                        .WithMany("CompoundRules")
                        .HasForeignKey("MoMorphData_CompoundRulesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStratum", "Stratum")
                        .WithMany()
                        .HasForeignKey("StratumGuid");

                    b.Navigation("Stratum");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoDeriv", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "InflectionalFeats")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoDeriv", "InflectionalFeatsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemAllomorph", "StemForm")
                        .WithMany()
                        .HasForeignKey("StemFormGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemMsa", "StemMsa")
                        .WithMany()
                        .HasForeignKey("StemMsaGuid");

                    b.Navigation("InflectionalFeats");

                    b.Navigation("StemForm");

                    b.Navigation("StemMsa");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoForm", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntry", null)
                        .WithMany("AlternateForms")
                        .HasForeignKey("LexEntry_AlternateFormsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphType", "MorphType")
                        .WithMany()
                        .HasForeignKey("MorphTypeGuid");

                    b.Navigation("MorphType");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoGlossItem", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "FeatStructFrag")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoGlossItem", "FeatStructFragGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoGlossItem", null)
                        .WithMany("GlossItems")
                        .HasForeignKey("MoGlossItem_GlossItemsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoGlossSystem", null)
                        .WithMany("Glosses")
                        .HasForeignKey("MoGlossSystem_GlossesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoGlossItem", "Target")
                        .WithMany()
                        .HasForeignKey("TargetGuid");

                    b.Navigation("FeatStructFrag");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInflAffixSlot", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", null)
                        .WithMany("AffixSlots")
                        .HasForeignKey("Possibility_AffixSlotsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInflAffixTemplate", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", null)
                        .WithMany("AffixTemplates")
                        .HasForeignKey("Possibility_AffixTemplatesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "Region")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoInflAffixTemplate", "RegionGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStratum", "Stratum")
                        .WithMany()
                        .HasForeignKey("StratumGuid");

                    b.Navigation("Region");

                    b.Navigation("Stratum");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInflClass", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflClass", null)
                        .WithMany("Subclasses")
                        .HasForeignKey("MoInflClass_SubclassesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", null)
                        .WithMany("InflectionClasses")
                        .HasForeignKey("Possibility_InflectionClassesGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoMorphData", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoGlossSystem", "GlossSystem")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoMorphData", "GlossSystemGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "ProdRestrict")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoMorphData", "ProdRestrictGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GlossSystem");

                    b.Navigation("ProdRestrict");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoMorphSynAnalysis", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntry", null)
                        .WithMany("MorphoSyntaxAnalyses")
                        .HasForeignKey("LexEntry_MorphoSyntaxAnalysesGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoReferralRule", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "Input")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoReferralRule", "InputGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflClass", null)
                        .WithMany("RulesOfReferral")
                        .HasForeignKey("MoInflClass_RulesOfReferralGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "Output")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoReferralRule", "OutputGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", null)
                        .WithMany("RulesOfReferral")
                        .HasForeignKey("Possibility_RulesOfReferralGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Input");

                    b.Navigation("Output");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoRuleMapping", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoAffixProcess", null)
                        .WithMany("Output")
                        .HasForeignKey("MoForm_OutputGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoStemName", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffMsa", "DefaultAffix")
                        .WithMany()
                        .HasForeignKey("DefaultAffixGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemName", "DefaultStem")
                        .WithMany()
                        .HasForeignKey("DefaultStemGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflClass", null)
                        .WithMany("StemNames")
                        .HasForeignKey("MoInflClass_StemNamesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", null)
                        .WithMany("StemNames")
                        .HasForeignKey("Possibility_StemNamesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DefaultAffix");

                    b.Navigation("DefaultStem");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoStratum", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphData", null)
                        .WithMany("Strata")
                        .HasForeignKey("MoMorphData_StrataGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonemeSet", "Phonemes")
                        .WithMany()
                        .HasForeignKey("PhonemesGuid");

                    b.Navigation("Phonemes");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfNote", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfSegment", null)
                        .WithMany("Notes")
                        .HasForeignKey("Segment_NotesGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfObjectId", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfStTxtPara", null)
                        .WithMany("AnalyzedTextObjects")
                        .HasForeignKey("StPara_AnalyzedTextObjectsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfOverlay", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "PossList")
                        .WithMany()
                        .HasForeignKey("PossListGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLangProject", null)
                        .WithMany("Overlays")
                        .HasForeignKey("Project_OverlaysGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("PossList");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhCode", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhTerminalUnit", null)
                        .WithMany("Codes")
                        .HasForeignKey("PhTerminalUnit_CodesGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhContextOrVar", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoAffixProcess", null)
                        .WithMany("Input")
                        .HasForeignKey("MoForm_InputGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonData", null)
                        .WithMany("Contexts")
                        .HasForeignKey("PhPhonData_ContextsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhEnvironment", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonContext", "LeftContext")
                        .WithMany()
                        .HasForeignKey("LeftContextGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonData", null)
                        .WithMany("Environments")
                        .HasForeignKey("PhPhonData_EnvironmentsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonContext", "RightContext")
                        .WithMany()
                        .HasForeignKey("RightContextGuid");

                    b.Navigation("LeftContext");

                    b.Navigation("RightContext");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhFeatureConstraint", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatDefn", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonData", null)
                        .WithMany("FeatConstraints")
                        .HasForeignKey("PhPhonData_FeatConstraintsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Feature");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhNaturalClass", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonData", null)
                        .WithMany("NaturalClasses")
                        .HasForeignKey("PhPhonData_NaturalClassesGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhPhonData", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "PhonRuleFeats")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPhPhonData", "PhonRuleFeatsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("PhonRuleFeats");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhPhonemeSet", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonData", null)
                        .WithMany("PhonemeSets")
                        .HasForeignKey("PhPhonData_PhonemeSetsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhSegRuleRHS", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonContext", "LeftContext")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPhSegRuleRHS", "LeftContextGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhRegularRule", null)
                        .WithMany("RightHandSides")
                        .HasForeignKey("PhSegmentRule_RightHandSidesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonContext", "RightContext")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPhSegRuleRHS", "RightContextGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftContext");

                    b.Navigation("RightContext");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhSegmentRule", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStratum", "FinalStratum")
                        .WithMany()
                        .HasForeignKey("FinalStratumGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStratum", "InitialStratum")
                        .WithMany()
                        .HasForeignKey("InitialStratumGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonData", null)
                        .WithMany("PhonRules")
                        .HasForeignKey("PhPhonData_PhonRulesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("FinalStratum");

                    b.Navigation("InitialStratum");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPicture", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", null)
                        .WithMany("Pictures")
                        .HasForeignKey("LexSense_PicturesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFile", "PictureFile")
                        .WithMany()
                        .HasForeignKey("PictureFileGuid");

                    b.Navigation("PictureFile");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPossibility", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "Confidence")
                        .WithMany()
                        .HasForeignKey("ConfidenceGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "Discussion")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPossibility", "DiscussionGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", null)
                        .WithMany("Possibilities")
                        .HasForeignKey("PossibilityList_PossibilitiesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", null)
                        .WithMany("SubPossibilities")
                        .HasForeignKey("Possibility_SubPossibilitiesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "Status")
                        .WithMany()
                        .HasForeignKey("StatusGuid");

                    b.Navigation("Confidence");

                    b.Navigation("Discussion");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPossibilityList", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLangProject", null)
                        .WithMany("CheckLists")
                        .HasForeignKey("Project_CheckListsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPubDivision", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPubHFSet", "HFSet")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPubDivision", "HFSetGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPubPageLayout", "PageLayout")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPubDivision", "PageLayoutGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPublication", null)
                        .WithMany("Divisions")
                        .HasForeignKey("Publication_DivisionsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("HFSet");

                    b.Navigation("PageLayout");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPubHFSet", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPubHeader", "DefaultFooter")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPubHFSet", "DefaultFooterGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPubHeader", "DefaultHeader")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPubHFSet", "DefaultHeaderGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfDsChart", null)
                        .WithMany("HeaderFooterSets")
                        .HasForeignKey("DsChart_HeaderFooterSetsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPubHeader", "EvenFooter")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPubHFSet", "EvenFooterGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPubHeader", "EvenHeader")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPubHFSet", "EvenHeaderGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPubHeader", "FirstFooter")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPubHFSet", "FirstFooterGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPubHeader", "FirstHeader")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPubHFSet", "FirstHeaderGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexDb", null)
                        .WithMany("HeaderFooterSets")
                        .HasForeignKey("LexDb_HeaderFooterSetsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", null)
                        .WithMany("HeaderFooterSets")
                        .HasForeignKey("PossibilityList_HeaderFooterSetsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfReversalIndex", null)
                        .WithMany("HeaderFooterSets")
                        .HasForeignKey("ReversalIndex_HeaderFooterSetsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnResearchNbk", null)
                        .WithMany("HeaderFooterSets")
                        .HasForeignKey("RnResearchNbk_HeaderFooterSetsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScripture", null)
                        .WithMany("HeaderFooterSets")
                        .HasForeignKey("Scripture_HeaderFooterSetsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfText", null)
                        .WithMany("HeaderFooterSets")
                        .HasForeignKey("Text_HeaderFooterSetsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfWordformLookupList", null)
                        .WithMany("HeaderFooterSets")
                        .HasForeignKey("WordformLookupList_HeaderFooterSetsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DefaultFooter");

                    b.Navigation("DefaultHeader");

                    b.Navigation("EvenFooter");

                    b.Navigation("EvenHeader");

                    b.Navigation("FirstFooter");

                    b.Navigation("FirstHeader");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPublication", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfDsChart", null)
                        .WithMany("Publications")
                        .HasForeignKey("DsChart_PublicationsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexDb", null)
                        .WithMany("Publications")
                        .HasForeignKey("LexDb_PublicationsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", null)
                        .WithMany("Publications")
                        .HasForeignKey("PossibilityList_PublicationsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfReversalIndex", null)
                        .WithMany("Publications")
                        .HasForeignKey("ReversalIndex_PublicationsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnResearchNbk", null)
                        .WithMany("Publications")
                        .HasForeignKey("RnResearchNbk_PublicationsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScripture", null)
                        .WithMany("Publications")
                        .HasForeignKey("Scripture_PublicationsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfText", null)
                        .WithMany("Publications")
                        .HasForeignKey("Text_PublicationsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfWordformLookupList", null)
                        .WithMany("Publications")
                        .HasForeignKey("WordformLookupList_PublicationsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfReminder", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnResearchNbk", null)
                        .WithMany("Reminders")
                        .HasForeignKey("RnResearchNbk_RemindersGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfResource", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexDb", null)
                        .WithMany("Resources")
                        .HasForeignKey("LexDb_ResourcesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScripture", null)
                        .WithMany("Resources")
                        .HasForeignKey("Scripture_ResourcesGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfReversalIndex", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexDb", null)
                        .WithMany("ReversalIndexes")
                        .HasForeignKey("LexDb_ReversalIndexesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "PartsOfSpeech")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfReversalIndex", "PartsOfSpeechGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("PartsOfSpeech");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfReversalIndexEntry", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", "PartOfSpeech")
                        .WithMany()
                        .HasForeignKey("PartOfSpeechGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfReversalIndexEntry", null)
                        .WithMany("Subentries")
                        .HasForeignKey("ReversalIndexEntry_SubentriesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfReversalIndex", null)
                        .WithMany("Entries")
                        .HasForeignKey("ReversalIndex_EntriesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("PartOfSpeech");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfRnGenericRec", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "Conclusions")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfRnGenericRec", "ConclusionsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "Confidence")
                        .WithMany()
                        .HasForeignKey("ConfidenceGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "Description")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfRnGenericRec", "DescriptionGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "Discussion")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfRnGenericRec", "DiscussionGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "ExternalMaterials")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfRnGenericRec", "ExternalMaterialsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "FurtherQuestions")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfRnGenericRec", "FurtherQuestionsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "Hypothesis")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfRnGenericRec", "HypothesisGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "PersonalNotes")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfRnGenericRec", "PersonalNotesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "ResearchPlan")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfRnGenericRec", "ResearchPlanGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany("SubRecords")
                        .HasForeignKey("RnGenericRec_SubRecordsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnResearchNbk", null)
                        .WithMany("Records")
                        .HasForeignKey("RnResearchNbk_RecordsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "Status")
                        .WithMany()
                        .HasForeignKey("StatusGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfText", "Text")
                        .WithMany()
                        .HasForeignKey("TextGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "Type")
                        .WithMany()
                        .HasForeignKey("TypeGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "VersionHistory")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfRnGenericRec", "VersionHistoryGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Conclusions");

                    b.Navigation("Confidence");

                    b.Navigation("Description");

                    b.Navigation("Discussion");

                    b.Navigation("ExternalMaterials");

                    b.Navigation("FurtherQuestions");

                    b.Navigation("Hypothesis");

                    b.Navigation("PersonalNotes");

                    b.Navigation("ResearchPlan");

                    b.Navigation("Status");

                    b.Navigation("Text");

                    b.Navigation("Type");

                    b.Navigation("VersionHistory");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfRnResearchNbk", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "RecTypes")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfRnResearchNbk", "RecTypesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("RecTypes");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfRnRoledPartic", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnGenericRec", null)
                        .WithMany("Participants")
                        .HasForeignKey("RnGenericRec_ParticipantsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "Role")
                        .WithMany()
                        .HasForeignKey("RoleGuid");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfRow", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFilter", null)
                        .WithMany("Rows")
                        .HasForeignKey("Filter_RowsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrBook", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrBookRef", "BookId")
                        .WithMany()
                        .HasForeignKey("BookIdGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrDraft", null)
                        .WithMany("Books")
                        .HasForeignKey("ScrDraft_BooksGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScripture", null)
                        .WithMany("ScriptureBooks")
                        .HasForeignKey("Scripture_ScriptureBooksGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "Title")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfScrBook", "TitleGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BookId");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrBookAnnotations", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfScripture", null)
                        .WithMany("BookAnnotations")
                        .HasForeignKey("Scripture_BookAnnotationsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrBookRef", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrRefSystem", null)
                        .WithMany("Books")
                        .HasForeignKey("ScrRefSystem_BooksGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrCheckRun", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrBookAnnotations", null)
                        .WithMany("ChkHistRecs")
                        .HasForeignKey("ScrBookAnnotations_ChkHistRecsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrDifference", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfStPara", "RevParagraph")
                        .WithMany()
                        .HasForeignKey("RevParagraphGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrBook", null)
                        .WithMany("Diffs")
                        .HasForeignKey("ScrBook_DiffsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("RevParagraph");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrDraft", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfScripture", null)
                        .WithMany("ArchivedDrafts")
                        .HasForeignKey("Scripture_ArchivedDraftsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrImportSet", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfScripture", null)
                        .WithMany("ImportSettings")
                        .HasForeignKey("Scripture_ImportSettingsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrImportSource", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfAnnotationDefn", "NoteType")
                        .WithMany()
                        .HasForeignKey("NoteTypeGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrImportSet", null)
                        .WithMany("BackTransSources")
                        .HasForeignKey("ScrImportSet_BackTransSourcesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrImportSet", null)
                        .WithMany("NoteSources")
                        .HasForeignKey("ScrImportSet_NoteSourcesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrImportSet", null)
                        .WithMany("ScriptureSources")
                        .HasForeignKey("ScrImportSet_ScriptureSourcesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("NoteType");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrMarkerMapping", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfAnnotationDefn", "NoteType")
                        .WithMany()
                        .HasForeignKey("NoteTypeGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrImportSet", null)
                        .WithMany("NoteMappings")
                        .HasForeignKey("ScrImportSet_NoteMappingsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrImportSet", null)
                        .WithMany("ScriptureMappings")
                        .HasForeignKey("ScrImportSet_ScriptureMappingsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStStyle", "Style")
                        .WithMany()
                        .HasForeignKey("StyleGuid");

                    b.Navigation("NoteType");

                    b.Navigation("Style");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrSection", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "Content")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfScrSection", "ContentGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "Heading")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfScrSection", "HeadingGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrBook", null)
                        .WithMany("Sections")
                        .HasForeignKey("ScrBook_SectionsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Content");

                    b.Navigation("Heading");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScripture", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "NoteCategories")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfScripture", "NoteCategoriesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("NoteCategories");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfSegment", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMediaURI", "MediaURI")
                        .WithMany()
                        .HasForeignKey("MediaURIGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPerson", "Speaker")
                        .WithMany()
                        .HasForeignKey("SpeakerGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStTxtPara", null)
                        .WithMany("Segments")
                        .HasForeignKey("StPara_SegmentsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("MediaURI");

                    b.Navigation("Speaker");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfStPara", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", null)
                        .WithMany("Paragraphs")
                        .HasForeignKey("StText_ParagraphsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfStStyle", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfStStyle", "BasedOn")
                        .WithMany()
                        .HasForeignKey("BasedOnGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStStyle", "Next")
                        .WithMany()
                        .HasForeignKey("NextGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLangProject", null)
                        .WithMany("Styles")
                        .HasForeignKey("Project_StylesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScripture", null)
                        .WithMany("Styles")
                        .HasForeignKey("Scripture_StylesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("BasedOn");

                    b.Navigation("Next");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfText", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "Contents")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfText", "ContentsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMediaContainer", "MediaFiles")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfText", "MediaFilesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Contents");

                    b.Navigation("MediaFiles");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfTextTag", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfSegment", "BeginSegment")
                        .WithMany()
                        .HasForeignKey("BeginSegmentGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfSegment", "EndSegment")
                        .WithMany()
                        .HasForeignKey("EndSegmentGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", null)
                        .WithMany("Tags")
                        .HasForeignKey("StText_TagsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "Tag")
                        .WithMany()
                        .HasForeignKey("TagGuid");

                    b.Navigation("BeginSegment");

                    b.Navigation("EndSegment");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfTranslation", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexExampleSentence", null)
                        .WithMany("Translations")
                        .HasForeignKey("LexExampleSentence_TranslationsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStTxtPara", null)
                        .WithMany("Translations")
                        .HasForeignKey("StPara_TranslationsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "Type")
                        .WithMany()
                        .HasForeignKey("TypeGuid");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfUserAppFeatAct", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLangProject", null)
                        .WithMany("ActivatedFeatures")
                        .HasForeignKey("Project_ActivatedFeaturesGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfUserConfigAcct", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLangProject", null)
                        .WithMany("UserAccounts")
                        .HasForeignKey("Project_UserAccountsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfVirtualOrdering", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfObjectId", "Source")
                        .WithMany()
                        .HasForeignKey("SourceGuid");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfWfiAnalysis", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoDeriv", "Derivation")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfWfiAnalysis", "DerivationGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "MsFeatures")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfWfiAnalysis", "MsFeaturesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfWfiWordform", null)
                        .WithMany("Analyses")
                        .HasForeignKey("WfiWordform_AnalysesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Category");

                    b.Navigation("Derivation");

                    b.Navigation("MsFeatures");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfWfiGloss", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfWfiAnalysis", null)
                        .WithMany("Meanings")
                        .HasForeignKey("WfiAnalysis_MeaningsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfWfiMorphBundle", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexEntryInflType", "InflType")
                        .WithMany()
                        .HasForeignKey("InflTypeGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoForm", "Morph")
                        .WithMany()
                        .HasForeignKey("MorphGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphSynAnalysis", "Msa")
                        .WithMany()
                        .HasForeignKey("MsaGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexSense", "Sense")
                        .WithMany()
                        .HasForeignKey("SenseGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfWfiAnalysis", null)
                        .WithMany("MorphBundles")
                        .HasForeignKey("WfiAnalysis_MorphBundlesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InflType");

                    b.Navigation("Morph");

                    b.Navigation("Msa");

                    b.Navigation("Sense");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfWfiWordSet", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphData", null)
                        .WithMany("TestSets")
                        .HasForeignKey("MoMorphData_TestSetsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfWordFormLookup", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfWordformLookupList", null)
                        .WithMany("Wordforms")
                        .HasForeignKey("WordformLookupList_WordformsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.PossibilityCustomFieldValue", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "Value")
                        .WithMany()
                        .HasForeignKey("PossibilityGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Value");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.StTextCustomFieldValue", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "Value")
                        .WithMany()
                        .HasForeignKey("StTextGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Value");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfBaseAnnotation", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfObjectId", "BeginObject")
                        .WithMany()
                        .HasForeignKey("BeginObjectGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfObjectId", "EndObject")
                        .WithMany()
                        .HasForeignKey("EndObjectGuid");

                    b.Navigation("BeginObject");

                    b.Navigation("EndObject");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfConstChartMovedTextMarker", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfConstChartWordGroup", "WordGroup")
                        .WithMany()
                        .HasForeignKey("WordGroupGuid");

                    b.Navigation("WordGroup");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfConstChartTag", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "Tag")
                        .WithMany()
                        .HasForeignKey("TagGuid");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfConstChartWordGroup", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfSegment", "BeginSegment")
                        .WithMany()
                        .HasForeignKey("BeginSegmentGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfSegment", "EndSegment")
                        .WithMany()
                        .HasForeignKey("EndSegmentGuid");

                    b.Navigation("BeginSegment");

                    b.Navigation("EndSegment");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfDsConstChart", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "BasedOn")
                        .WithMany()
                        .HasForeignKey("BasedOnGuid");

                    b.Navigation("BasedOn");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsFeatStruc", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStrucDisj", null)
                        .WithMany("Contents")
                        .HasForeignKey("FsAbsStruc_ContentsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflClass", null)
                        .WithMany("ReferenceForms")
                        .HasForeignKey("MoInflClass_ReferenceFormsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemName", null)
                        .WithMany("Regions")
                        .HasForeignKey("MoStemName_RegionsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", null)
                        .WithMany("EmptyParadigmCells")
                        .HasForeignKey("Possibility_EmptyParadigmCellsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", null)
                        .WithMany("ReferenceForms")
                        .HasForeignKey("Possibility_ReferenceFormsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStrucType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeGuid");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsFeatStrucDisj", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", null)
                        .WithMany("FeatureDisjunctions")
                        .HasForeignKey("FsAbsStruc_FeatureDisjunctionsGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsComplexFeature", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStrucType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeGuid");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsClosedValue", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsSymFeatVal", "Value")
                        .WithMany()
                        .HasForeignKey("ValueGuid");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsComplexValue", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsAbstractStructure", "Value")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfFsComplexValue", "ValueGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Value");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsNegatedValue", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsSymFeatVal", "Value")
                        .WithMany()
                        .HasForeignKey("ValueGuid");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsSharedValue", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatureSpecification", "Value")
                        .WithMany()
                        .HasForeignKey("ValueGuid");

                    b.Navigation("Value");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoAlloAdhocProhib", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoForm", "FirstAllomorph")
                        .WithMany()
                        .HasForeignKey("FirstAllomorphGuid");

                    b.Navigation("FirstAllomorph");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoMorphAdhocProhib", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphSynAnalysis", "FirstMorpheme")
                        .WithMany()
                        .HasForeignKey("FirstMorphemeGuid");

                    b.Navigation("FirstMorpheme");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoBinaryCompoundRule", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemMsa", "LeftMsa")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoBinaryCompoundRule", "LeftMsaGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoAffixForm", "Linker")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoBinaryCompoundRule", "LinkerGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemMsa", "RightMsa")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoBinaryCompoundRule", "RightMsaGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftMsa");

                    b.Navigation("Linker");

                    b.Navigation("RightMsa");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoCompoundRuleApp", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemAllomorph", "LeftForm")
                        .WithMany()
                        .HasForeignKey("LeftFormGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoAffixAllomorph", "Linker")
                        .WithMany()
                        .HasForeignKey("LinkerGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStratumApp", null)
                        .WithMany("CompoundRuleApps")
                        .HasForeignKey("MoDerivTrace_CompoundRuleAppsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemAllomorph", "RightForm")
                        .WithMany()
                        .HasForeignKey("RightFormGuid");

                    b.Navigation("LeftForm");

                    b.Navigation("Linker");

                    b.Navigation("RightForm");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoDerivAffApp", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoAffixAllomorph", "AffixForm")
                        .WithMany()
                        .HasForeignKey("AffixFormGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoDerivAffMsa", "AffixMsa")
                        .WithMany()
                        .HasForeignKey("AffixMsaGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStratumApp", null)
                        .WithMany("DerivAffApp")
                        .HasForeignKey("MoDerivTrace_DerivAffAppGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoDerivStepMsa", "OutputMsa")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoDerivAffApp", "OutputMsaGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AffixForm");

                    b.Navigation("AffixMsa");

                    b.Navigation("OutputMsa");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInflAffixSlotApp", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoAffixForm", "AffixForm")
                        .WithMany()
                        .HasForeignKey("AffixFormGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffMsa", "AffixMsa")
                        .WithMany()
                        .HasForeignKey("AffixMsaGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflTemplateApp", null)
                        .WithMany("SlotApps")
                        .HasForeignKey("MoDerivTrace_SlotAppsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixSlot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotGuid");

                    b.Navigation("AffixForm");

                    b.Navigation("AffixMsa");

                    b.Navigation("Slot");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInflTemplateApp", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflAffixTemplate", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateGuid");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoPhonolRuleApp", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStratumApp", null)
                        .WithMany("PRuleApps")
                        .HasForeignKey("MoDerivTrace_PRuleAppsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfObjectId", "Rule")
                        .WithMany()
                        .HasForeignKey("RuleGuid");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoStratumApp", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoDeriv", null)
                        .WithMany("StratumApps")
                        .HasForeignKey("MoDeriv_StratumAppsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStratum", "Stratum")
                        .WithMany()
                        .HasForeignKey("StratumGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflTemplateApp", "TemplateApp")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoStratumApp", "TemplateAppGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Stratum");

                    b.Navigation("TemplateApp");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoStemAllomorph", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemName", "StemName")
                        .WithMany()
                        .HasForeignKey("StemNameGuid");

                    b.Navigation("StemName");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoDerivAffMsa", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "AffixCategory")
                        .WithMany()
                        .HasForeignKey("AffixCategoryGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflClass", "FromInflectionClass")
                        .WithMany()
                        .HasForeignKey("FromInflectionClassGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "FromMsFeatures")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoDerivAffMsa", "FromMsFeaturesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", "FromPartOfSpeech")
                        .WithMany()
                        .HasForeignKey("FromPartOfSpeechGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemName", "FromStemName")
                        .WithMany()
                        .HasForeignKey("FromStemNameGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStratum", "Stratum")
                        .WithMany()
                        .HasForeignKey("StratumGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflClass", "ToInflectionClass")
                        .WithMany()
                        .HasForeignKey("ToInflectionClassGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "ToMsFeatures")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoDerivAffMsa", "ToMsFeaturesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", "ToPartOfSpeech")
                        .WithMany()
                        .HasForeignKey("ToPartOfSpeechGuid");

                    b.Navigation("AffixCategory");

                    b.Navigation("FromInflectionClass");

                    b.Navigation("FromMsFeatures");

                    b.Navigation("FromPartOfSpeech");

                    b.Navigation("FromStemName");

                    b.Navigation("Stratum");

                    b.Navigation("ToInflectionClass");

                    b.Navigation("ToMsFeatures");

                    b.Navigation("ToPartOfSpeech");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoDerivStepMsa", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "InflFeats")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoDerivStepMsa", "InflFeatsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflClass", "InflectionClass")
                        .WithMany()
                        .HasForeignKey("InflectionClassGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "MsFeatures")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoDerivStepMsa", "MsFeaturesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", "PartOfSpeech")
                        .WithMany()
                        .HasForeignKey("PartOfSpeechGuid");

                    b.Navigation("InflFeats");

                    b.Navigation("InflectionClass");

                    b.Navigation("MsFeatures");

                    b.Navigation("PartOfSpeech");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInflAffMsa", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "AffixCategory")
                        .WithMany()
                        .HasForeignKey("AffixCategoryGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "InflFeats")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoInflAffMsa", "InflFeatsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", "PartOfSpeech")
                        .WithMany()
                        .HasForeignKey("PartOfSpeechGuid");

                    b.Navigation("AffixCategory");

                    b.Navigation("InflFeats");

                    b.Navigation("PartOfSpeech");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoStemMsa", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflClass", "InflectionClass")
                        .WithMany()
                        .HasForeignKey("InflectionClassGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "MsFeatures")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoStemMsa", "MsFeaturesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", "PartOfSpeech")
                        .WithMany()
                        .HasForeignKey("PartOfSpeechGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStratum", "Stratum")
                        .WithMany()
                        .HasForeignKey("StratumGuid");

                    b.Navigation("InflectionClass");

                    b.Navigation("MsFeatures");

                    b.Navigation("PartOfSpeech");

                    b.Navigation("Stratum");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoUnclassifiedAffixMsa", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", "PartOfSpeech")
                        .WithMany()
                        .HasForeignKey("PartOfSpeechGuid");

                    b.Navigation("PartOfSpeech");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoCopyFromInput", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhContextOrVar", "Content")
                        .WithMany()
                        .HasForeignKey("ContentGuid");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInsertNC", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhNaturalClass", "Content")
                        .WithMany()
                        .HasForeignKey("ContentGuid");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoModifyFromInput", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhContextOrVar", "Content")
                        .WithMany()
                        .HasForeignKey("ContentGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhNCFeatures", "Modification")
                        .WithMany()
                        .HasForeignKey("ModificationGuid");

                    b.Navigation("Content");

                    b.Navigation("Modification");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhPhonContext", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfStText", "Description")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPhPhonContext", "DescriptionGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Description");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhNCFeatures", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "Features")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPhNCFeatures", "FeaturesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Features");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhBdryMarker", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonemeSet", null)
                        .WithMany("BoundaryMarkers")
                        .HasForeignKey("PhPhonemeSet_BoundaryMarkersGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhPhoneme", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "Features")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPhPhoneme", "FeaturesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonemeSet", null)
                        .WithMany("Phonemes")
                        .HasForeignKey("PhPhonemeSet_PhonemesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Features");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPartOfSpeech", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "DefaultFeatures")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPartOfSpeech", "DefaultFeaturesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoInflClass", "DefaultInflectionClass")
                        .WithMany()
                        .HasForeignKey("DefaultInflectionClassGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "InherFeatVal")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfPartOfSpeech", "InherFeatValGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DefaultFeatures");

                    b.Navigation("DefaultInflectionClass");

                    b.Navigation("InherFeatVal");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPerson", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibility", "Education")
                        .WithMany()
                        .HasForeignKey("EducationGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLocation", "PlaceOfBirth")
                        .WithMany()
                        .HasForeignKey("PlaceOfBirthGuid");

                    b.Navigation("Education");

                    b.Navigation("PlaceOfBirth");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhPhonRuleFeat", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfObjectId", "Item")
                        .WithMany()
                        .HasForeignKey("ItemGuid");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLangProject", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "AffixCategories")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "AffixCategoriesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "AnnotationDefs")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "AnnotationDefsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "AnthroList")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "AnthroListGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "ConfidenceLevels")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "ConfidenceLevelsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfDsDiscourseData", "DiscourseData")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "DiscourseDataGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "Education")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "EducationGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFolder", "FilePathsInTsStrings")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "FilePathsInTsStringsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "GenreList")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "GenreListGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfLexDb", "LexDb")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "LexDbGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "Locations")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "LocationsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoMorphData", "MorphologicalData")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "MorphologicalDataGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatureSystem", "MsFeatureSystem")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "MsFeatureSystemGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "PartsOfSpeech")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "PartsOfSpeechGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "People")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "PeopleGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatureSystem", "PhFeatureSystem")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "PhFeatureSystemGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonData", "PhonologicalData")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "PhonologicalDataGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "Positions")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "PositionsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfRnResearchNbk", "ResearchNotebook")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "ResearchNotebookGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "Restrictions")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "RestrictionsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "Roles")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "RolesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "SemanticDomainList")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "SemanticDomainListGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "Status")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "StatusGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "TextMarkupTags")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "TextMarkupTagsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "Thesaurus")
                        .WithMany()
                        .HasForeignKey("ThesaurusGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "TimeOfDay")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "TimeOfDayGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScripture", "TranslatedScripture")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "TranslatedScriptureGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPossibilityList", "TranslationTags")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLangProject", "TranslationTagsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AffixCategories");

                    b.Navigation("AnnotationDefs");

                    b.Navigation("AnthroList");

                    b.Navigation("ConfidenceLevels");

                    b.Navigation("DiscourseData");

                    b.Navigation("Education");

                    b.Navigation("FilePathsInTsStrings");

                    b.Navigation("GenreList");

                    b.Navigation("LexDb");

                    b.Navigation("Locations");

                    b.Navigation("MorphologicalData");

                    b.Navigation("MsFeatureSystem");

                    b.Navigation("PartsOfSpeech");

                    b.Navigation("People");

                    b.Navigation("PhFeatureSystem");

                    b.Navigation("PhonologicalData");

                    b.Navigation("Positions");

                    b.Navigation("ResearchNotebook");

                    b.Navigation("Restrictions");

                    b.Navigation("Roles");

                    b.Navigation("SemanticDomainList");

                    b.Navigation("Status");

                    b.Navigation("TextMarkupTags");

                    b.Navigation("Thesaurus");

                    b.Navigation("TimeOfDay");

                    b.Navigation("TranslatedScripture");

                    b.Navigation("TranslationTags");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfStJournalText", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrScriptureNote", null)
                        .WithMany("Responses")
                        .HasForeignKey("Annotation_ResponsesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPerson", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPerson", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedByGuid");

                    b.Navigation("CreatedBy");

                    b.Navigation("ModifiedBy");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrScriptureNote", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfStJournalText", "Discussion")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfScrScriptureNote", "DiscussionGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStJournalText", "Quote")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfScrScriptureNote", "QuoteGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStJournalText", "Recommendation")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfScrScriptureNote", "RecommendationGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfStJournalText", "Resolution")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfScrScriptureNote", "ResolutionGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrBookAnnotations", null)
                        .WithMany("Notes")
                        .HasForeignKey("ScrBookAnnotations_NotesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Discussion");

                    b.Navigation("Quote");

                    b.Navigation("Recommendation");

                    b.Navigation("Resolution");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoEndoCompound", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemMsa", "OverridingMsa")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoEndoCompound", "OverridingMsaGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OverridingMsa");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoExoCompound", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfMoStemMsa", "ToMsa")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoExoCompound", "ToMsaGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ToMsa");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoAffixAllomorph", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "MsEnvFeatures")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfMoAffixAllomorph", "MsEnvFeaturesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPartOfSpeech", "MsEnvPartOfSpeech")
                        .WithMany()
                        .HasForeignKey("MsEnvPartOfSpeechGuid");

                    b.Navigation("MsEnvFeatures");

                    b.Navigation("MsEnvPartOfSpeech");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhIterationContext", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhonContext", "Member")
                        .WithMany()
                        .HasForeignKey("MemberGuid");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhSimpleContext", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhSegRuleRHS", null)
                        .WithMany("StrucChange")
                        .HasForeignKey("PhSegRuleRHS_StrucChangeGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhSegmentRule", null)
                        .WithMany("StrucDesc")
                        .HasForeignKey("PhSegmentRule_StrucDescGuid")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexEntryInflType", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfFsFeatStruc", "InflFeats")
                        .WithOne()
                        .HasForeignKey("SIL.LCModel.EFCore.Model.LfLexEntryInflType", "InflFeatsGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("InflFeats");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrFootnote", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrTxtPara", "ParaContainingOrc")
                        .WithMany()
                        .HasForeignKey("ParaContainingOrcGuid");

                    b.HasOne("SIL.LCModel.EFCore.Model.LfScrBook", null)
                        .WithMany("Footnotes")
                        .HasForeignKey("ScrBook_FootnotesGuid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ParaContainingOrc");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhSimpleContextBdry", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhBdryMarker", "FeatureStructure")
                        .WithMany()
                        .HasForeignKey("FeatureStructureGuid");

                    b.Navigation("FeatureStructure");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhSimpleContextNC", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhNaturalClass", "FeatureStructure")
                        .WithMany()
                        .HasForeignKey("FeatureStructureGuid");

                    b.Navigation("FeatureStructure");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhSimpleContextSeg", b =>
                {
                    b.HasOne("SIL.LCModel.EFCore.Model.LfPhPhoneme", "FeatureStructure")
                        .WithMany()
                        .HasForeignKey("FeatureStructureGuid");

                    b.Navigation("FeatureStructure");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfConstChartRow", b =>
                {
                    b.Navigation("Cells");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfDsChart", b =>
                {
                    b.Navigation("HeaderFooterSets");

                    b.Navigation("Publications");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfDsDiscourseData", b =>
                {
                    b.Navigation("Charts");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFilter", b =>
                {
                    b.Navigation("Rows");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFolder", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("SubFolders");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsFeatureSystem", b =>
                {
                    b.Navigation("Features");

                    b.Navigation("Types");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexDb", b =>
                {
                    b.Navigation("Appendixes");

                    b.Navigation("HeaderFooterSets");

                    b.Navigation("Publications");

                    b.Navigation("Resources");

                    b.Navigation("ReversalIndexes");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexEntry", b =>
                {
                    b.Navigation("AlternateForms");

                    b.Navigation("CustomFieldValues");

                    b.Navigation("EntryRefs");

                    b.Navigation("Etymology");

                    b.Navigation("MorphoSyntaxAnalyses");

                    b.Navigation("Pronunciations");

                    b.Navigation("Senses");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexExampleSentence", b =>
                {
                    b.Navigation("CustomFieldValues");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexExtendedNote", b =>
                {
                    b.Navigation("Examples");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexPronunciation", b =>
                {
                    b.Navigation("MediaFiles");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexSense", b =>
                {
                    b.Navigation("CustomFieldValues");

                    b.Navigation("Examples");

                    b.Navigation("ExtendedNote");

                    b.Navigation("Pictures");

                    b.Navigation("Senses");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMediaContainer", b =>
                {
                    b.Navigation("MediaURIs");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoDeriv", b =>
                {
                    b.Navigation("StratumApps");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoForm", b =>
                {
                    b.Navigation("CustomFieldValues");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoGlossItem", b =>
                {
                    b.Navigation("GlossItems");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoGlossSystem", b =>
                {
                    b.Navigation("Glosses");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInflClass", b =>
                {
                    b.Navigation("ReferenceForms");

                    b.Navigation("RulesOfReferral");

                    b.Navigation("StemNames");

                    b.Navigation("Subclasses");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoMorphData", b =>
                {
                    b.Navigation("AdhocCoProhibitions");

                    b.Navigation("CompoundRules");

                    b.Navigation("Strata");

                    b.Navigation("TestSets");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoStemName", b =>
                {
                    b.Navigation("Regions");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhPhonData", b =>
                {
                    b.Navigation("Contexts");

                    b.Navigation("Environments");

                    b.Navigation("FeatConstraints");

                    b.Navigation("NaturalClasses");

                    b.Navigation("PhonRules");

                    b.Navigation("PhonemeSets");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhPhonemeSet", b =>
                {
                    b.Navigation("BoundaryMarkers");

                    b.Navigation("Phonemes");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhSegRuleRHS", b =>
                {
                    b.Navigation("StrucChange");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhSegmentRule", b =>
                {
                    b.Navigation("StrucDesc");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhTerminalUnit", b =>
                {
                    b.Navigation("Codes");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPossibility", b =>
                {
                    b.Navigation("SubPossibilities");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPossibilityList", b =>
                {
                    b.Navigation("HeaderFooterSets");

                    b.Navigation("Possibilities");

                    b.Navigation("Publications");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPublication", b =>
                {
                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfReversalIndex", b =>
                {
                    b.Navigation("Entries");

                    b.Navigation("HeaderFooterSets");

                    b.Navigation("Publications");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfReversalIndexEntry", b =>
                {
                    b.Navigation("Subentries");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfRnGenericRec", b =>
                {
                    b.Navigation("Participants");

                    b.Navigation("SubRecords");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfRnResearchNbk", b =>
                {
                    b.Navigation("CrossReferences");

                    b.Navigation("HeaderFooterSets");

                    b.Navigation("Publications");

                    b.Navigation("Records");

                    b.Navigation("Reminders");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfRow", b =>
                {
                    b.Navigation("Cells");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrBook", b =>
                {
                    b.Navigation("Diffs");

                    b.Navigation("Footnotes");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrBookAnnotations", b =>
                {
                    b.Navigation("ChkHistRecs");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrDraft", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrImportSet", b =>
                {
                    b.Navigation("BackTransSources");

                    b.Navigation("NoteMappings");

                    b.Navigation("NoteSources");

                    b.Navigation("ScriptureMappings");

                    b.Navigation("ScriptureSources");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrRefSystem", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScripture", b =>
                {
                    b.Navigation("ArchivedDrafts");

                    b.Navigation("BookAnnotations");

                    b.Navigation("HeaderFooterSets");

                    b.Navigation("ImportSettings");

                    b.Navigation("Publications");

                    b.Navigation("Resources");

                    b.Navigation("ScriptureBooks");

                    b.Navigation("Styles");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfSegment", b =>
                {
                    b.Navigation("Notes");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfStText", b =>
                {
                    b.Navigation("Paragraphs");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfText", b =>
                {
                    b.Navigation("HeaderFooterSets");

                    b.Navigation("Publications");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfWfiAnalysis", b =>
                {
                    b.Navigation("Meanings");

                    b.Navigation("MorphBundles");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfWfiWordform", b =>
                {
                    b.Navigation("Analyses");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfWordformLookupList", b =>
                {
                    b.Navigation("HeaderFooterSets");

                    b.Navigation("Publications");

                    b.Navigation("Wordforms");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfDsConstChart", b =>
                {
                    b.Navigation("Rows");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsFeatStruc", b =>
                {
                    b.Navigation("FeatureDisjunctions");

                    b.Navigation("FeatureSpecs");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsFeatStrucDisj", b =>
                {
                    b.Navigation("Contents");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfFsClosedFeature", b =>
                {
                    b.Navigation("Values");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoAdhocProhibGr", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoInflTemplateApp", b =>
                {
                    b.Navigation("SlotApps");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoStratumApp", b =>
                {
                    b.Navigation("CompoundRuleApps");

                    b.Navigation("DerivAffApp");

                    b.Navigation("PRuleApps");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPhRegularRule", b =>
                {
                    b.Navigation("RightHandSides");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfChkTerm", b =>
                {
                    b.Navigation("Occurrences");

                    b.Navigation("Renderings");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLexRefType", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfPartOfSpeech", b =>
                {
                    b.Navigation("AffixSlots");

                    b.Navigation("AffixTemplates");

                    b.Navigation("EmptyParadigmCells");

                    b.Navigation("InflectionClasses");

                    b.Navigation("ReferenceForms");

                    b.Navigation("RulesOfReferral");

                    b.Navigation("StemNames");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfSemanticDomain", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfLangProject", b =>
                {
                    b.Navigation("ActivatedFeatures");

                    b.Navigation("AnalyzingAgents");

                    b.Navigation("Annotations");

                    b.Navigation("CheckLists");

                    b.Navigation("Filters");

                    b.Navigation("Media");

                    b.Navigation("Overlays");

                    b.Navigation("Pictures");

                    b.Navigation("Styles");

                    b.Navigation("UserAccounts");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrImportSFFiles", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfStTxtPara", b =>
                {
                    b.Navigation("AnalyzedTextObjects");

                    b.Navigation("Segments");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfScrScriptureNote", b =>
                {
                    b.Navigation("Responses");
                });

            modelBuilder.Entity("SIL.LCModel.EFCore.Model.LfMoAffixProcess", b =>
                {
                    b.Navigation("Input");

                    b.Navigation("Output");
                });
#pragma warning restore 612, 618
        }
    }
}
